{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Filesystem, FilesystemDirectory, FilesystemEncoding } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@awesome-cordova-plugins/call-number/ngx\";\nexport let UiService = /*#__PURE__*/(() => {\n  class UiService {\n    constructor(loadingController, toastController, alertController, modalController, callNumber, actionSheetCtrl) {\n      this.loadingController = loadingController;\n      this.toastController = toastController;\n      this.alertController = alertController;\n      this.modalController = modalController;\n      this.callNumber = callNumber;\n      this.actionSheetCtrl = actionSheetCtrl;\n    }\n\n    loading(message, duration) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const loader = yield this.loadingController.create({\n          mode: 'ios',\n          message,\n          //Set the maximum duration to load the current loader\n          duration: duration || 10000\n        }); //Finish the loader no matter if it not finish the operation\n\n        setTimeout(() => __awaiter(this, void 0, void 0, function* () {\n          loader.dismiss();\n        }), 10000);\n        yield loader.present();\n        return loader;\n      });\n    }\n\n    loadingDissmiss() {\n      return __awaiter(this, void 0, void 0, function* () {\n        (yield this.loader).dismiss();\n      });\n    }\n\n    call(number) {\n      this.callNumber.callNumber(number, true).then(res => console.log('Launched dialer!', res)).catch(err => __awaiter(this, void 0, void 0, function* () {\n        yield this.presentAlert({\n          mode: 'ios',\n          header: 'No se ha podido iniciar la llamada',\n          buttons: [{\n            text: 'Aceptar',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {}\n          }]\n        });\n      }));\n    }\n\n    presentActionSheet(header, buttons) {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Only allow file selection inside a browser\n        const actionSheet = yield this.actionSheetCtrl.create({\n          mode: 'ios',\n          header,\n          buttons\n        });\n        yield actionSheet.present();\n        return actionSheet;\n      });\n    }\n\n    presentAlert(opttion) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const alert = yield this.alertController.create(Object.assign(Object.assign({}, opttion), {\n          mode: 'ios'\n        }));\n        yield alert.present();\n        return alert;\n      });\n    }\n\n    presentModal(component, properties, cssClass = 'my-custom-class') {\n      return __awaiter(this, void 0, void 0, function* () {\n        const modal = yield this.modalController.create({\n          component,\n          cssClass,\n          componentProps: properties\n        });\n        yield modal.present();\n        return modal;\n      });\n    }\n\n    dismiss(obj) {\n      // using the injected ModalController this page\n      // can \"dismiss\" itself and optionally pass back data\n      this.modalController.dismiss({\n        obj\n      });\n    }\n\n    showToast(message, action) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const toast = yield this.toastController.create({\n          message,\n          duration: 3000,\n          position: 'bottom'\n        });\n        toast.present();\n\n        if (action) {\n          toast.onDidDismiss().then(() => {\n            action();\n          });\n        }\n      });\n    }\n\n    fileRead() {\n      return __awaiter(this, void 0, void 0, function* () {\n        let contents = yield Filesystem.readFile({\n          path: 'secrets/text.txt',\n          directory: FilesystemDirectory.Documents,\n          encoding: FilesystemEncoding.UTF8\n        });\n        console.log(contents);\n      });\n    }\n\n  }\n\n  UiService.ɵfac = function UiService_Factory(t) {\n    return new (t || UiService)(i0.ɵɵinject(i1.LoadingController), i0.ɵɵinject(i1.ToastController), i0.ɵɵinject(i1.AlertController), i0.ɵɵinject(i1.ModalController), i0.ɵɵinject(i2.CallNumber), i0.ɵɵinject(i1.ActionSheetController));\n  };\n\n  UiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UiService,\n    factory: UiService.ɵfac,\n    providedIn: 'root'\n  });\n  return UiService;\n})();","map":null,"metadata":{},"sourceType":"module"}