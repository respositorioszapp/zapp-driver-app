{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from \"../../environments/environment.prod\";\nimport { Plugins } from '@capacitor/core';\nimport { timeout } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst {\n  Network\n} = Plugins;\nexport let RequestService = /*#__PURE__*/(() => {\n  class RequestService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getHeader(data_header) {\n      const data = localStorage.getItem('data');\n      let header = {};\n\n      if (data) {\n        const y = JSON.parse(data);\n        const options = {\n          Authorization: `Bearer ${y.token}`\n        };\n\n        if (data_header) {\n          Object.keys(data_header).forEach(key => {\n            options[key] = data_header[key];\n          });\n        }\n\n        const headers = new HttpHeaders(options);\n        header = {\n          headers\n        };\n        console.log(\"Header\", header);\n      }\n\n      return header;\n    }\n\n    get(url, useSecondUrl) {\n      let url_base = !useSecondUrl ? environment.BASEURL : environment.SECONDARY_URL;\n      console.log(\"Url\", `${url_base}${url}`);\n      return this.http.get(`${url_base}${url}`, this.getHeader()).pipe(timeout(30000));\n    }\n\n    post(url, body, useSecondUrl, headers) {\n      let url_base = !useSecondUrl ? environment.BASEURL : environment.SECONDARY_URL;\n      console.log(\"Url\", `${url_base}${url}`);\n      return this.http.post(`${url_base}${url}`, body, this.getHeader(headers)).pipe(timeout(30000));\n    }\n\n    put(url, body, useSecondUrl) {\n      let url_base = !useSecondUrl ? environment.BASEURL : environment.SECONDARY_URL;\n      return this.http.put(`${url_base}${url}`, body, this.getHeader()).pipe(timeout(10000));\n    }\n\n    delete(url, useSecondUrl) {\n      let url_base = !useSecondUrl ? environment.BASEURL : environment.SECONDARY_URL;\n      return this.http.delete(`${url_base}${url}`, this.getHeader()).pipe(timeout(10000));\n    }\n\n  }\n\n  RequestService.ɵfac = function RequestService_Factory(t) {\n    return new (t || RequestService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  RequestService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RequestService,\n    factory: RequestService.ɵfac,\n    providedIn: 'root'\n  });\n  return RequestService;\n})();","map":null,"metadata":{},"sourceType":"module"}