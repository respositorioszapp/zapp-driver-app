{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { EventsPage } from '../events/events.page';\nimport { Plugins, Capacitor, Network } from '@capacitor/core';\nimport { take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport BackgroundGeolocation from 'cordova-background-geolocation-lt';\nconst {\n  Haptics\n} = Plugins;\nimport { Geolocation } from '@awesome-cordova-plugins/geolocation/ngx';\nlet ViewDetailPage = class ViewDetailPage {\n  constructor(ui, request, auth, db, place, network, realtime, days, platform, foregroundService) {\n    this.ui = ui;\n    this.request = request;\n    this.auth = auth;\n    this.db = db;\n    this.place = place;\n    this.network = network;\n    this.realtime = realtime;\n    this.days = days;\n    this.platform = platform;\n    this.foregroundService = foregroundService; // @ViewChild(HTMLIonLoadingElement) loading: HTMLIonLoadingElement\n\n    this.az_arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    this.statesClasses = {\n      \"23\": \"red\",\n      \"24\": \"blue\",\n      \"25\": \"green\"\n    };\n    this.markers = [];\n    this.distance = \"\";\n    this.duration = 0;\n    this.duration_text = \"\";\n    this.details = [];\n    this.initTimerB = false;\n    this.firstTime = true;\n    this.equal_or_greater_than_a_kilometer = true;\n    this.markerPoints = [];\n    this.view_more = false;\n    this.proximity = 1;\n    this.s = 0;\n    this.m = 0;\n    this.h = 0;\n    this.timer_hour = \"00:00:00\";\n    this.markers_numbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '50'];\n    this.client_configuration_data = {};\n    this.total_charge = 0;\n    this.marker_div = null;\n    this.paths = [];\n    this.keyDetail = \"\";\n  } //#region Life Cycle ionic Angular\n\n\n  ngOnInit() {\n    return __awaiter(this, void 0, void 0, function* () {});\n  }\n\n  ngAfterContentInit() {\n    console.log(\"Content Init\");\n\n    if (this.latLng) {\n      console.log(\"Content Init defined\", this.latLng);\n      console.log(\"Content init Markers\", this.markerPoints);\n      const location = this.latLng;\n      this.locationSubscription = location.subscribe(loc => {\n        console.log(\"Content Init Subscribe\", loc); //Set the marker position\n\n        this.markerPoints[0].setPosition(loc);\n        this.updatePosition(this.auth.user.id, this.auth.vehicles.id, loc.lat, loc.lng, loc.bearing);\n      });\n    }\n  }\n\n  ionViewWillLeave() {\n    console.log(\"ionViewWillLeave\");\n    clearInterval(this.positionTracking);\n  }\n\n  ionViewDidLeave() {\n    console.log(\"ionViewDidLeave\");\n    clearInterval(this.positionTracking);\n  }\n\n  ngOnDestroy() {\n    //Called once, before the instance is destroyed.\n    //Add 'implements OnDestroy' to the class.\n    clearInterval(this.positionTracking);\n  }\n\n  ionViewDidEnter() {\n    return __awaiter(this, void 0, void 0, function* () {// this.changeAvailability(true);\n    });\n  }\n\n  ionViewWillEnter() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.order.service_type_id == 3) {\n        this.view_more = true;\n      } // this.icon=encodeURIComponent(this.icon)\n      // this.icon = this.icon.replace(\"<\", \"\\ <\")\n\n\n      this.sTopTimer();\n\n      if (this.order.status_order != 25 && this.order.status_order != 31) {\n        if (localStorage.getItem(\"initTimer\") && this.order.service_type_id != 3) {\n          this.initTimer();\n        }\n\n        this.total_charge = 0;\n\n        if (this.detailActive && this.detailActive.total_charge) {\n          this.total_charge = Number(this.detailActive.total_charge);\n        }\n      }\n\n      clearInterval(this.positionTracking);\n      console.log(\"Proximity\", this.proximity); // this.changeAvailability()\n\n      if (this.network.getNetworkStatus().connected) {\n        //Assign the proximity property from the the SQL database\n        // this.proximity = this.order.proximity;\n        this.orderSubscription = this.realtime.getNewOrder().valueChanges().subscribe(res => {\n          // console.log(\"New order res\", res.proximity)\n          if (res != null) {\n            if (typeof res.proximity != \"undefined\") {\n              //Assign the proximity property from firebase\n              this.proximity = res.proximity;\n            }\n          }\n\n          console.log(\"Proximity\", this.proximity);\n        });\n\n        if (this.order.service_type_id != 3) {\n          this.request.get(\"list/attributes?parameter_id=9\").subscribe(res => {\n            let distance = Number(res.data[0].value);\n            this.equal_or_greater_than_a_kilometer = distance >= 1000;\n\n            if (distance >= 1000) {\n              distance = distance / 1000;\n            }\n\n            this.minimum_distance = distance;\n          }, err => {\n            this.ui.showToast(\"Verifique su conexión\", () => {\n              this.clearLocals();\n              this.dismiss();\n            });\n          });\n        }\n\n        console.log(\"Order\", this.order);\n        let icon = \"\";\n        clearInterval(this.positionTracking);\n\n        if (this.order.service_type_id != 3) {\n          switch (Number(this.auth.vehicles.transport_type_id)) {\n            case 4:\n              icon = \"assets/imgs/moto-new.svg\";\n              break;\n\n            case 5:\n              icon = \"assets/imgs/carry.png\";\n              break;\n\n            case 6:\n              icon = \"assets/imgs/auto.png\";\n              break;\n          }\n\n          if (this.order.status_order != 31) {\n            this.markers.push(icon);\n          }\n\n          this.markers_numbers.map((ab, i) => {\n            //  \n            this.markers.push(\"/assets/imgs/markers_numbers/\" + (i + 1) + '.png');\n          });\n        }\n\n        const latitude = localStorage.getItem(\"latitude\");\n        const longitude = localStorage.getItem(\"longitude\");\n        console.log(\"Order Current\", this.order);\n\n        if (this.order.status_order == 22 || this.order.status_order == 23 || this.order.status_order == 53) {\n          try {\n            const data = new FormData();\n            data.append(\"order_id\", this.order.id);\n            data.append(\"latitude\", latitude.toString());\n            data.append(\"longitude\", longitude.toString());\n            data.append(\"description\", \"Inicio Servicio\");\n            data.append(\"user_id\", this.auth.user.id.toString());\n            this.request.post('driver/start_service', data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n              if (this.order.service_type_id == 3) {\n                this.initTimerForTimeService(true);\n                this.realtime.getFirebaseCollectionObject(`status_order_mobile/${this.order.city_id}/${this.order.customer_id}/${this.order.id}`).valueChanges().subscribe(res => {\n                  if (res != null) {\n                    if (res.status_order == 25) {\n                      this.order.status_order = 25;\n                      this.dismiss();\n                      this.clearLocals();\n\n                      if (this.subscription) {\n                        this.subscription.unsubscribe();\n                      }\n\n                      if (this.subscription2) {\n                        this.subscription2.unsubscribe();\n                      }\n\n                      this.ui.presentAlert({\n                        mode: 'ios',\n                        header: 'Orden Finalizada',\n                        message: 'La orden ha sido finalizada con éxito',\n                        buttons: [{\n                          text: 'Aceptar',\n                          role: 'cancel',\n                          cssClass: 'secondary',\n                          handler: blah => {}\n                        }]\n                      });\n                      return;\n                    }\n                  }\n                }); // this.backgroundMode.on('activate').subscribe(res=>{\n                //   console.log(\"Debug init timer background\")\n                //   this.initTimerForTimeService(true);\n                // })\n                // this.backgroundMode.on('deactivate').subscribe(res=>{\n                //   console.log(\"Debug init timer foreground\")\n                //   this.initTimerForTimeService(true);\n                // })\n              }\n\n              if (this.order.zapp_store_order == 0) {\n                this.order.status_order = 24;\n              }\n\n              let details = this.order.details ? this.order.details : this.order.detail;\n              details = details.map(d => {\n                const detail = Object.assign(Object.assign({}, d), {\n                  status: 24\n                });\n                return Object.assign(Object.assign({}, d), {\n                  status: 24\n                });\n              });\n              details.forEach(detail => {\n                this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${detail.id}`).update(Object.assign(Object.assign({}, detail), {\n                  status: 24\n                }));\n              });\n              this.order.details = details; // this.ui.showToast(\"Se inició el servicio\");\n\n              console.log(\"Order Current\", this.order);\n              localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n\n              if (this.order.service_type_id != 3) {\n                this.loadMap(true);\n              } else {//this.initTimerForTimeService()\n              }\n            }), err => __awaiter(this, void 0, void 0, function* () {\n              console.log(\"Error\", err);\n              localStorage.removeItem(\"current_order\");\n              this.clearLocals();\n\n              if (err.status == 400) {\n                yield this.ui.presentAlert({\n                  mode: 'ios',\n                  header: 'No se ha podido iniciar el servicio',\n                  message: err.error.messages[0],\n                  buttons: [{\n                    text: 'Aceptar',\n                    role: 'cancel',\n                    cssClass: 'secondary',\n                    handler: blah => {\n                      this.dismiss();\n                    }\n                  }]\n                });\n              }\n\n              console.log(\"Error\", err);\n            }));\n          } catch (e) {\n            console.log(\"Error\", e);\n          }\n        } else {\n          if (this.order.status_order == 25) {\n            this.request.get(`driver/events_per_driver/${this.order.id}/${this.auth.user.id}`).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n              const event = res.data.find(e => e.latitude && e.longitude);\n              const {\n                latitude,\n                longitude\n              } = event;\n              console.log(\"Event\", event);\n              this.details.unshift({\n                latitude,\n                longitude\n              });\n              this.order.details.map(d => {\n                this.details.push({\n                  id: d.id,\n                  latitude: d.latitude,\n                  longitude: d.longitude\n                });\n              });\n              console.log(\"Details\", this.details);\n              this.loadMap(true);\n            }), err => __awaiter(this, void 0, void 0, function* () {\n              localStorage.removeItem(\"current_order\");\n              this.clearLocals();\n              yield this.ui.presentAlert({\n                mode: 'ios',\n                header: 'No se ha podido mostrar el historial',\n                buttons: [{\n                  text: 'Aceptar',\n                  role: 'cancel',\n                  cssClass: 'secondary',\n                  handler: blah => {\n                    this.dismiss();\n                  }\n                }]\n              });\n              console.log(\"Error\", err);\n            }));\n          } else {\n            if (this.order.service_type_id != 3) {\n              this.loadMap(true);\n            } else {\n              this.realtime.getFirebaseCollectionObject(`status_order_mobile/${this.order.city_id}/${this.order.customer_id}/${this.order.id}`).valueChanges().subscribe(res => {\n                if (res != null) {\n                  if (res.status_order == 25) {\n                    this.order.status_order = 25;\n                    this.dismiss();\n                    this.clearLocals();\n\n                    if (this.subscription) {\n                      this.subscription.unsubscribe();\n                    }\n\n                    if (this.subscription2) {\n                      this.subscription2.unsubscribe();\n                    }\n\n                    this.ui.presentAlert({\n                      mode: 'ios',\n                      header: 'Orden Finalizada',\n                      message: 'La orden ha sido finalizada con éxito',\n                      buttons: [{\n                        text: 'Aceptar',\n                        role: 'cancel',\n                        cssClass: 'secondary',\n                        handler: blah => {}\n                      }]\n                    });\n                    return;\n                  }\n                }\n              });\n              this.initTimerForTimeService();\n            }\n          }\n        }\n\n        try {\n          let latitude;\n          let longitude;\n\n          if (localStorage.getItem(\"latitude\") && localStorage.getItem(\"longitude\")) {\n            latitude = localStorage.getItem(\"latitude\");\n            longitude = localStorage.getItem(\"longitude\");\n          } else {\n            const position = yield Geolocation.getCurrentPosition({\n              enableHighAccuracy: true\n            });\n            latitude = position.coords.latitude;\n            longitude = position.coords.longitude;\n          }\n\n          localStorage.setItem(\"latitude\", latitude.toString());\n          localStorage.setItem(\"longitude\", longitude.toString());\n          const y = this.realtime.getUserGeolocation().valueChanges().pipe(take(1)).subscribe(snapshot => {\n            console.log(snapshot);\n            y.unsubscribe();\n\n            if (snapshot === null) {\n              this.realtime.getUserGeolocation().set({\n                key: this.auth.user.id,\n                user_id: this.auth.user.id,\n                latitude: latitude.toString(),\n                longitude: longitude.toString(),\n                city_id: this.auth.person.city_id,\n                state_id: Number(this.auth.person.state_id),\n                level_id: Number(this.auth.user.level_id),\n                // last_active: Date.now(),\n                available: this.auth.user.available,\n                driver_name: this.auth.user.name,\n                transport_type_id: this.auth.vehicles.transport_type_id\n              });\n            } else {\n              // update\n              this.realtime.getUserGeolocation().update({\n                key: this.auth.user.id,\n                user_id: this.auth.user.id,\n                latitude: latitude.toString(),\n                longitude: longitude.toString(),\n                city_id: this.auth.person.city_id,\n                state_id: Number(this.auth.person.state_id),\n                level_id: Number(this.auth.user.level_id),\n                // last_active: Date.now(),\n                available: this.auth.user.available,\n                driver_name: this.auth.user.name,\n                transport_type_id: this.auth.vehicles.transport_type_id\n              });\n            }\n          });\n        } catch (e) {\n          let latitude;\n          let longitude;\n\n          if (localStorage.getItem(\"latitude\") && localStorage.getItem(\"longitude\")) {\n            latitude = localStorage.getItem(\"latitude\");\n            longitude = localStorage.getItem(\"longitude\");\n            const y = this.realtime.getUserGeolocation().valueChanges().pipe(take(1)).subscribe(snapshot => {\n              console.log(snapshot);\n              y.unsubscribe();\n\n              if (snapshot === null) {\n                this.realtime.getUserGeolocation().set({\n                  key: this.auth.user.id,\n                  user_id: this.auth.user.id,\n                  latitude: latitude.toString(),\n                  longitude: longitude.toString(),\n                  city_id: this.auth.person.city_id,\n                  state_id: Number(this.auth.person.state_id),\n                  level_id: Number(this.auth.user.level_id),\n                  // last_active: Date.now(),\n                  available: this.auth.user.available,\n                  driver_name: this.auth.user.name,\n                  transport_type_id: this.auth.vehicles.transport_type_id\n                });\n              } else {\n                // update\n                this.realtime.getUserGeolocation().update({\n                  key: this.auth.user.id,\n                  user_id: this.auth.user.id,\n                  latitude: latitude.toString(),\n                  longitude: longitude.toString(),\n                  city_id: this.auth.person.city_id,\n                  state_id: Number(this.auth.person.state_id),\n                  level_id: Number(this.auth.user.level_id),\n                  // last_active: Date.now(),\n                  available: this.auth.user.available,\n                  driver_name: this.auth.user.name,\n                  transport_type_id: this.auth.vehicles.transport_type_id\n                });\n              }\n            });\n          }\n        }\n\n        this.order.step = this.order.details.findIndex(d => d.status != 25);\n      } else {\n        this.ui.showToast(\"Verifique su conexión e intentelo de nuevo\", () => {\n          localStorage.removeItem(\"current_order\");\n          this.clearLocals();\n          this.dismiss();\n        });\n      }\n    });\n  } //#endregion\n\n\n  viewMore() {\n    this.view_more = !this.view_more;\n\n    if (!this.view_more) {\n      clearInterval(this.positionTracking);\n    } else {\n      if (this.order.status_order != 25) {// this.changeAvailability();\n      }\n    }\n  }\n\n  get detailActive() {\n    return this.order.details.find(d => d.status != 25 && d.status != 36 && d.status != 48);\n  }\n\n  findLetter() {\n    let index = 0;\n\n    if (this.order.details) {\n      index = this.order.details.findIndex(d => d == this.detailActive);\n    } else {\n      index = this.order.detail.findIndex(d => d == this.detailActive);\n    }\n\n    return this.markers_numbers[index];\n  }\n\n  dismiss() {\n    clearInterval(this.positionTracking);\n    this.ui.dismiss();\n  }\n\n  initTimerForTimeService(init = false) {\n    this.keyDetail = `initDetailTime${this.detailActive.id}`;\n    const initDetailTime = localStorage.getItem(this.keyDetail);\n\n    if (!initDetailTime) {\n      this.initTime = new Date();\n      localStorage.setItem(this.keyDetail, Date.now().toString());\n    } else {\n      this.initTime = new Date(Number(initDetailTime));\n    }\n\n    this.s = 0;\n    this.m = 0;\n    this.h = 0;\n\n    if (localStorage.getItem(\"timer\")) {\n      const timer = JSON.parse(localStorage.getItem(\"timer\"));\n      this.s = timer.seconds;\n      this.m = timer.minutes;\n      this.h = timer.hours;\n    }\n\n    if (this.detailActive.timer) {\n      const time = this.detailActive.timer;\n      this.s = time.seconds;\n      this.m = time.minutes;\n      this.h = time.hours;\n    }\n\n    let close_time;\n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n    const timer = {\n      seconds: this.s,\n      minutes: this.m,\n      hours: this.h\n    };\n    this.initTimerB = true;\n    localStorage.setItem(\"initTimer\", \"yes\");\n    localStorage.setItem(\"timer\", JSON.stringify(timer));\n\n    if (init && this.id_interval) {\n      console.log(\"Debug Clear interval\");\n      clearInterval(this.id_interval);\n    }\n\n    this.id_interval = setInterval(() => {\n      this.timerForTimeService();\n    }, 1000);\n    localStorage.setItem(\"id_interval\", this.id_interval.toString());\n  }\n\n  timerForTimeService() {\n    return __awaiter(this, void 0, void 0, function* () {\n      var hAux, mAux, sAux;\n      let daysD = 0;\n      let close_time;\n      let hours = 0;\n      let minutes = 0;\n      let seconds = 0;\n      const intDate = localStorage.getItem(this.keyDetail);\n      var dateFuture = new Date(Number(intDate));\n      var dateNow = new Date();\n      var secondsS = Math.floor((dateNow - dateFuture) / 1000);\n      var minutesS = Math.floor(secondsS / 60);\n      var hoursS = Math.floor(minutesS / 60);\n      var days = Math.floor(hoursS / 24);\n      console.log(`Debug Days ${days} Hours ${hoursS} Minutes ${minutesS} Seconds ${secondsS}`);\n      hours = hoursS - days * 24;\n      minutes = minutesS - days * 24 * 60 - hours * 60;\n      seconds = secondsS - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n      console.log(`Debug Days ${daysD} Hours ${hours} Minutes ${minutes} Seconds ${seconds}`);\n      this.s = seconds;\n      this.m = minutes;\n      this.h = hours;\n      console.log(\"Seconds\", this.s);\n\n      if (this.s > 59) {\n        this.m++;\n        this.s = 0;\n      }\n\n      if (this.m > 59) {\n        this.h++;\n        this.m = 0;\n      }\n\n      if (this.detailActive) {\n        const today = new Date();\n        const today_date = {\n          day: today.getDate(),\n          month: today.getMonth() + 1,\n          year: today.getFullYear()\n        };\n        const date_split = this.order.date.split(\"-\");\n        const date_service_date = {\n          day: Number(date_split[2]),\n          month: Number(date_split[1]),\n          year: Number(date_split[0])\n        };\n        const isToday = Object.keys(today_date).every(key => {\n          return today_date[key] == date_service_date[key];\n        });\n\n        if (this.h == Number(this.detailActive.number_of_hours) || !isToday) {\n          clearInterval(this.id_interval);\n          this.clearLocals();\n          this.endTimeOrder();\n          yield this.ui.presentAlert({\n            mode: 'ios',\n            header: '¡Tu viaje ha finalizado!',\n            buttons: [{\n              text: 'Aceptar',\n              role: 'cancel',\n              cssClass: 'secondary',\n              handler: blah => {}\n            }]\n          });\n        }\n      } else {\n        console.log(\"Not exist\");\n      }\n\n      if (this.h > 24) {\n        this.h = 0;\n      }\n\n      if (this.s < 10) {\n        sAux = \"0\" + this.s;\n      } else {\n        sAux = this.s;\n      }\n\n      if (this.m < 10) {\n        mAux = \"0\" + this.m;\n      } else {\n        mAux = this.m;\n      }\n\n      if (this.h < 10) {\n        hAux = \"0\" + this.h;\n      } else {\n        hAux = this.h;\n      }\n\n      const timer = {\n        seconds: this.s,\n        minutes: this.m,\n        hours: this.h\n      };\n      console.log(\"Seconds After\", timer.seconds);\n      localStorage.setItem(\"timer\", JSON.stringify(timer));\n      /*\n      REGISTER THE CURRENT DATE\n      THE REASON OT THIS IS\n       IF THE USER CLOSE THE APPLICATION\n       READ IT AND CALCULATE THE DIFFERENCE BETWEEN THE LAST SAVED DATE AND THE CURRENT DATE\n      */\n\n      this.timer_hour = hAux + \":\" + mAux + \":\" + sAux;\n\n      if (this.detailActive) {\n        const detail = this.order.details.find(d => d.id == this.detailActive.id);\n        console.log(\"Detail\", detail, this.detailActive, this.details);\n        detail.timer = timer;\n        detail.total_charge = this.total_charge;\n        console.log(\"FIND dETAIL\", detail); //Update real time timer for the client\n\n        this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${this.detailActive.id}`).update(Object.assign({}, detail));\n        localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n      }\n    });\n  }\n\n  getDaysHoursMinutesSecondsFromMiliseconds(ms) {\n    let days = 0;\n    let daysms = 0;\n    let hours = 0;\n    let hoursms;\n    let minutes;\n    let minutesms;\n    let sec;\n    days = Math.floor(ms / (24 * 60 * 60 * 1000));\n    daysms = ms % (24 * 60 * 60 * 1000);\n    hours = Math.floor(daysms / (60 * 60 * 1000));\n    hoursms = ms % (60 * 60 * 1000);\n    minutes = Math.floor(hoursms / (60 * 1000));\n    minutesms = ms % (60 * 1000);\n    sec = Math.floor(minutesms / 1000);\n    return {\n      days,\n      hours,\n      minutes,\n      sec\n    };\n  }\n\n  initTimer() {\n    this.keyDetail = `initDetailTime${this.detailActive.id}`;\n    const initDetailTime = localStorage.getItem(this.keyDetail);\n\n    if (!initDetailTime) {\n      localStorage.setItem(this.keyDetail, Date.now().toString());\n    }\n\n    this.s = 0;\n    this.m = 0;\n    this.h = 0;\n\n    if (this.detailActive.timer) {\n      const time = this.detailActive.timer;\n      this.s = time.seconds;\n      this.m = time.minutes;\n      this.h = time.hours;\n      const minuteToCharge = Number(this.m) + Number(this.h) * 60;\n      this.total_charge = Math.floor(minuteToCharge / Number(this.order.time_wait)) * Number(this.order.rate_per_minute);\n      console.log(\"Total charge\", this.total_charge);\n      console.log(\"Timer\", time);\n    }\n\n    let close_time;\n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n    const timer = {\n      seconds: this.s,\n      minutes: this.m,\n      hours: this.h\n    };\n    console.log(`Difference Time ${timer.hours}:${timer.minutes}:${timer.seconds}`);\n    localStorage.setItem(\"timer\", JSON.stringify(timer));\n    this.initTimerB = true;\n    localStorage.setItem(\"initTimer\", \"yes\");\n    this.total_charge = 0;\n    const detail = this.order.details.find(d => d.id == this.detailActive.id);\n\n    if (detail) {\n      detail.timer = timer;\n      detail.total_charge = 0;\n      console.log(\"Order \", this.order);\n      localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n    }\n\n    console.log(\"Detail\");\n    this.id_interval = setInterval(() => {\n      this.timer();\n    }, 1000);\n    localStorage.setItem(\"id_interval\", this.id_interval.toString());\n  }\n\n  sTopTimer() {\n    localStorage.removeItem(\"id_interval\");\n    clearInterval(this.id_interval);\n  }\n\n  timer() {\n    let hAux, mAux, sAux;\n    let close_time;\n    let daysD = 0;\n    let hours = 0;\n    let minutes = 0;\n    let seconds = 0;\n    /**\n     * This feature is for when the operating\n     * system close the processes of the application when it restarts\n     * take the App close date and compare it with the current time and get the difference in hours, minutes and seconds\n     */\n\n    const intDate = localStorage.getItem(this.keyDetail);\n    var dateFuture = new Date(Number(intDate));\n    var dateNow = new Date();\n    var secondsS = Math.floor((dateNow - dateFuture) / 1000);\n    var minutesS = Math.floor(secondsS / 60);\n    var hoursS = Math.floor(minutesS / 60);\n    var days = Math.floor(hoursS / 24);\n    console.log(`Days ${days} Hours ${hoursS} Minutes ${minutesS} Seconds ${secondsS}`);\n    hours = hoursS - days * 24;\n    minutes = minutesS - days * 24 * 60 - hours * 60;\n    seconds = secondsS - days * 24 * 60 * 60 - hours * 60 * 60 - minutes * 60;\n    console.log(`Days ${daysD} Hours ${hours} Minutes ${minutes} Seconds ${seconds}`);\n    this.s = seconds;\n    this.m = minutes;\n    this.h = hours;\n    const detail = this.order.details.find(d => d.id == this.detailActive.id);\n\n    if (this.order.time_wait) {\n      //if the minute is multiple of order the it recalculate the total charge\n\n      /**\n       * With this formula\n       * total_charge = (minutes/order_wait_time)*order_rate_per_minute\n       */\n      this.total_charge = 0;\n      const minuteToCharge = Number(this.m) + Number(this.h) * 60 + Number(days) * 24 * 60;\n      this.total_charge = Math.floor(minuteToCharge / Number(this.order.time_wait)) * Number(this.order.rate_per_minute);\n      console.log(\"Total charge\", this.total_charge, this.order.time_wait, this.order.rate_per_minute, minuteToCharge, Math.floor(minuteToCharge / Number(this.order.time_wait)));\n    } else {\n      console.log(\"Not exist\");\n    }\n\n    if (this.s < 10) {\n      sAux = \"0\" + this.s;\n    } else {\n      sAux = this.s;\n    }\n\n    if (this.m < 10) {\n      mAux = \"0\" + this.m;\n    } else {\n      mAux = this.m;\n    }\n\n    if (this.h < 10) {\n      hAux = \"0\" + this.h;\n    } else {\n      hAux = this.h;\n    }\n\n    const timer = {\n      seconds: this.s,\n      minutes: this.m,\n      hours: this.h\n    };\n\n    if (detail) {\n      detail.timer = timer;\n      detail.total_charge = this.total_charge;\n      console.log(\"FIND dETAIL\", detail); //Update real time timer for the client\n\n      this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${this.detailActive.id}`).update(Object.assign({}, detail));\n      localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n    }\n\n    this.timer_hour = hAux + \":\" + mAux + \":\" + sAux;\n  }\n\n  clearLocals() {\n    //id_interval\n    localStorage.removeItem(\"current_order\");\n    localStorage.removeItem(\"total_charge\");\n    localStorage.removeItem(\"initTimer\");\n    localStorage.removeItem(\"client_configuration_data\");\n    localStorage.removeItem(\"configuration_data\");\n    localStorage.removeItem(\"timer\");\n    localStorage.removeItem(this.keyDetail);\n    localStorage.removeItem(\"bearing\");\n    localStorage.removeItem(\"bearing_used\");\n    localStorage.removeItem(\"app_close_date\");\n    this.sTopTimer();\n\n    if (this.locationSubscription) {\n      this.locationSubscription.unsubscribe();\n    }\n  }\n\n  toNumber(number) {\n    return Number(number);\n  }\n\n  toogleComment(detail) {\n    if (detail.status != 25) {\n      if (detail.comment) {\n        detail.comment = undefined;\n        return;\n      }\n\n      detail.comment = \"yes\";\n    } else {\n      this.ui.showToast(\"La direccióon ya está realizada en el detalle del servicio\");\n    }\n  }\n\n  loadMap(firstTime = false) {\n    return __awaiter(this, void 0, void 0, function* () {\n      //obtener usos de la API\n      if (this.network.getNetworkStatus().connected) {\n        const loader = yield this.ui.loading(\"Por favor espere...\");\n\n        try {\n          if (this.order.status_order != 25 && this.order.status_order != 31 && this.order.status_order != 48) {\n            let latitude;\n            let longitude;\n\n            if (localStorage.getItem(\"latitude\") && localStorage.getItem(\"longitude\")) {\n              latitude = localStorage.getItem(\"latitude\");\n              longitude = localStorage.getItem(\"longitude\");\n            } else {}\n\n            this.details.unshift({\n              latitude,\n              longitude\n            });\n            this.latitude = latitude;\n            this.longitude = longitude;\n          }\n\n          if (this.order.status_order != 25) {\n            this.order.details.map(d => {\n              this.details.push({\n                id: d.id,\n                latitude: d.latitude,\n                longitude: d.longitude\n              });\n            });\n          }\n\n          var directionsService = new google.maps.DirectionsService();\n          var directionsDisplay = new google.maps.DirectionsRenderer({\n            suppressMarkers: true\n          }); //puntos de referencia para agregar\n\n          var waypts = [];\n          var markers = [];\n          var infos = []; //coordenadas de los puntos de ruta\n\n          for (let i = 0; i < this.details.length; i++) {\n            if (this.details[i].latitude && this.details[i].longitude) {\n              let latlng = {\n                lat: parseFloat(this.details[i].latitude),\n                lng: parseFloat(this.details[i].longitude)\n              };\n              waypts.push({\n                location: latlng,\n                stopover: true\n              });\n            }\n          }\n\n          console.log(\"Way Points\", waypts); //creo mapa\n\n          const center = {\n            lat: waypts[0].location.lat,\n            lng: waypts[0].location.lng\n          };\n          var map = new google.maps.Map(document.getElementById('map'), {\n            zoom: 8,\n            center: {\n              lat: waypts[0].location.lat,\n              lng: waypts[0].location.lng\n            },\n            mapTypeControl: false,\n            zoomControl: true,\n            streetViewControl: false\n          });\n          this.map = map; //muestro el mapa\n\n          directionsDisplay.setMap(map); //ventanas de informacion\n\n          var infoWindow = new google.maps.InfoWindow(); //coordenadas markers personalizados con ventana de información\n\n          if (this.details.length < 25) {\n            for (let i = 0; i < this.details.length; i++) {\n              let latlng = {\n                lat: parseFloat(this.details[i].latitude),\n                lng: parseFloat(this.details[i].longitude)\n              };\n              console.log(\"Marker Url\", this.markers[i]); //Adding icon to the marker\n\n              let icon_image = {\n                url: this.markers[i],\n                scaledSize: i == 0 ? new google.maps.Size(35, 50) : new google.maps.Size(35, 50),\n                // The origin for this image is (0, 0).\n                origin: new google.maps.Point(0, 0),\n                // The anchor for this image is the base of the flagpole at (0, 32).\n                anchor: new google.maps.Point(0, 32) // anchor \n\n              };\n              var marker_icon = icon_image;\n              let marker = new google.maps.Marker({\n                position: latlng,\n                map: map,\n                icon: marker_icon,\n                id: \"dsd\",\n                optimized: false\n              });\n              const url = \"img[src='\" + this.markers[0] + \"']\";\n              console.log(\"Url\", url);\n              const y = document.querySelectorAll(\"img[src='assets/imgs/moto-new.svg']\");\n              this.marker_div = document.querySelector(url);\n              this.markerPoints.push(marker); // agrego la informacion de la dirección\n\n              console.log(\"Detail\", this.details[i]);\n              const df = this.order.details.find(d => d.id == this.details[i].id);\n              console.log(\"Df\", df);\n\n              if (df) {\n                infos.push(df.address);\n              }\n\n              if (i != 0) {\n                const y = this;\n                google.maps.event.addListener(marker, 'click', function (marker, i) {\n                  return function () {\n                    const df = y.order.details.find(d => d.id == y.details[i].id);\n                    console.log(\"Detail\", df);\n                    infoWindow.setContent(df.address);\n                    infoWindow.open(map, marker);\n                  };\n                }(marker, i));\n              }\n            }\n          } // pregunto si es ida y vuelta el servicio\n\n\n          let origin, destination, return_pt;\n          let n = this.order.status_order != 31 ? this.details.length - 1 : waypts.length - 1;\n          console.log(\"Length Array\", n);\n\n          if (this.order && this.order.round_trip == 1) {\n            console.log(\"Round trip\");\n            origin = {\n              lat: waypts[0].location.lat,\n              lng: waypts[0].location.lng\n            };\n            destination = {\n              lat: waypts[0].location.lat,\n              lng: waypts[0].location.lng\n            };\n            return_pt = {\n              lat: waypts[n].location.lat,\n              lng: waypts[n].location.lng\n            }; //punto de retorno en km y min\n\n            if (this.order.status_order != 25) {\n              if (this.order.status_order != 31) {\n                this.getDistanceMatrix(return_pt, origin);\n              }\n            }\n          } else {\n            origin = {\n              lat: waypts[0].location.lat,\n              lng: waypts[0].location.lng\n            };\n            destination = {\n              lat: waypts[n].location.lat,\n              lng: waypts[n].location.lng\n            };\n\n            if (this.order.status_order != 25 && this.order.status_order != 31) {\n              this.getDistanceMatrix(origin, destination);\n            }\n          }\n\n          const _this = this;\n\n          console.log(\"Origin\", origin, \"Destination\", destination);\n          console.log(\"Way Points\", waypts);\n\n          if (this.details.length >= 25) {\n            //DIVIDIMOS EL DRIVER NEAR ADDRRES EN PARTES DE 25, EL CUAL ES EL LIMITE POR SOLICITUD\n            for (var i = 0, parts_driver_address = [], max = 23 - 1; i < this.details.length; i = i + max + 1) parts_driver_address.push(this.details.slice(i, i + max + 1));\n\n            for (var i = 0, parts = [], max = 23; i < waypts.length; i = i + max) parts.push(waypts.slice(i, i + max)); //\n\n\n            console.log('PARTES DEL WPTS', parts); // AQUI RECOORO EL ARR PARTS Y HAGO LAS DISITINTAS SOLICITUDES\n\n            /*  **************************************************************************************** */\n\n            /*   *********************INICIO DEL RECORRIDO DE CADA PARTE ***************************** */\n\n            /*  **************************************************************************************** */\n            //Aqui definio el numero desde donde empezara el recorrido de marcadore\n\n            let marker_origin_number; //\n\n            let array_routed_addresses = [];\n\n            for (var i = 0; i < parts.length; i++) {\n              // CALCULAR LA DIRECCION MAS LEJANA DE LA PARTE ACTUAL \n              //\n              let origin_por_recorrido;\n\n              if (i == 0) {\n                origin_por_recorrido = origin;\n                console.log('SEGUNDA PARTE', origin_por_recorrido);\n              } else {\n                origin_por_recorrido = {\n                  lat: Number(array_routed_addresses[array_routed_addresses.length - 1].latitude),\n                  lng: Number(array_routed_addresses[array_routed_addresses.length - 1].longitude)\n                };\n                console.log('SEGUNDA PARTE', origin_por_recorrido);\n                marker_origin_number = parts[i - 1].length; //\n              }\n\n              console.log('marker_origin_number', marker_origin_number);\n              var waypoints = [];\n\n              for (var j = 0; j < parts[i].length; j++) {\n                waypoints.push(parts[i][j]);\n                console.log('I', i, 'J', j);\n              }\n\n              let services_options = {\n                origin: origin_por_recorrido,\n                destination: destination,\n                waypoints: waypoints,\n                travelMode: google.maps.TravelMode.DRIVING // drivingOptions: {\n                //   departureTime: new Date(Date.now()),  // for the time N milliseconds from now.\n                //   trafficModel: 'optimistic',\n                // },\n                // optimizeWaypoints: true,\n                // avoidTolls : true\n\n              };\n              yield this.printDirections(services_options, this.map);\n              array_routed_addresses = array_routed_addresses.concat(parts_driver_address[i]); // array_routed_addresses = await this.directionServiceFunction(services_options, driver,map,parts_driver_near_address[i]);\n\n              console.log('ESTE ES EL ARRAY ENRUTADO INICIAL LDM', array_routed_addresses);\n            }\n\n            for (let i = 0; i < this.details.length; i++) {\n              let latlng = {\n                lat: parseFloat(this.details[i].latitude),\n                lng: parseFloat(this.details[i].longitude)\n              };\n              console.log(\"Marker Url\", this.markers[i]);\n              var car = \"M17.402,0H5.643C2.526,0,0,3.467,0,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759c3.116,0,5.644-2.527,5.644-5.644 V6.584C23.044,3.467,20.518,0,17.402,0z M22.057,14.188v11.665l-2.729,0.351v-4.806L22.057,14.188z M20.625,10.773 c-1.016,3.9-2.219,8.51-2.219,8.51H4.638l-2.222-8.51C2.417,10.773,11.3,7.755,20.625,10.773z M3.748,21.713v4.492l-2.73-0.349 V14.502L3.748,21.713z M1.018,37.938V27.579l2.73,0.343v8.196L1.018,37.938z M2.575,40.882l2.218-3.336h13.771l2.219,3.336H2.575z M19.328,35.805v-7.872l2.729-0.355v10.048L19.328,35.805z\";\n              var icon = {\n                path: this.markers[0],\n                scale: .7,\n                strokeColor: 'white',\n                strokeWeight: .10,\n                fillOpacity: 1,\n                fillColor: '#404040',\n                offset: '5%',\n                // rotation: parseInt(heading[i]),\n                anchor: new google.maps.Point(10, 25) // orig 10,50 back of car, 10,0 front of car, 10,25 center of car\n\n              }; //Adding icon to the marker\n\n              let icon_image = {\n                url: this.markers[i],\n                scaledSize: i == 0 ? new google.maps.Size(50, 50) : new google.maps.Size(35, 50),\n                // The origin for this image is (0, 0).\n                origin: new google.maps.Point(0, 0),\n                // The anchor for this image is the base of the flagpole at (0, 32).\n                anchor: new google.maps.Point(0, 32) // anchor \n\n              };\n              var marker_icon = icon_image;\n              let marker = new google.maps.Marker({\n                position: latlng,\n                map: map,\n                icon: marker_icon\n              });\n              this.markerPoints.push(marker); // agrego la informacion de la dirección\n\n              console.log(\"Detail\", this.details[i]);\n              const df = this.order.details.find(d => d.id == this.details[i].id);\n              console.log(\"Df\", df);\n\n              if (df) {\n                infos.push(df.address);\n              }\n\n              if (i != 0) {\n                const y = this;\n                google.maps.event.addListener(marker, 'click', function (marker, i) {\n                  return function () {\n                    const df = y.order.details.find(d => d.id == y.details[i].id);\n                    console.log(\"Detail\", df);\n                    infoWindow.setContent(df.address);\n                    infoWindow.open(map, marker);\n                  };\n                }(marker, i));\n              }\n            }\n\n            (yield loader).dismiss();\n          }\n\n          if (this.details.length < 25) {\n            directionsService.route({\n              origin: origin,\n              destination: destination,\n              waypoints: waypts,\n              travelMode: google.maps.TravelMode.DRIVING\n            }, function (response, status) {\n              return __awaiter(this, void 0, void 0, function* () {\n                (yield loader).dismiss();\n\n                if (status === google.maps.DirectionsStatus.OK) {\n                  directionsDisplay.setDirections(response);\n                  console.log(\"center\", center);\n                  console.log(\"Response Directions\", response);\n\n                  _this.map.setCenter(center);\n\n                  if (_this.order.status_order != 25 && _this.order.status_order != 31 && _this.order.status_order != 48 && _this.order.status_order != 36) {\n                    _this.realtime.getFirebaseCollectionObject(`status_order_mobile/${_this.order.city_id}/${_this.order.customer_id}/${_this.order.id}`).valueChanges().subscribe(res => {\n                      if (res != null) {\n                        if (res.status_order == 31) {\n                          _this.dismiss();\n\n                          _this.clearLocals();\n\n                          if (this.subscription) {\n                            _this.subscription.unsubscribe();\n                          }\n\n                          if (this.subscription2) {\n                            _this.subscription2.unsubscribe();\n                          }\n\n                          _this.ui.presentAlert({\n                            mode: 'ios',\n                            header: 'Advertencia',\n                            message: 'La orden ha sido cancelada por el cliente',\n                            buttons: [{\n                              text: 'Aceptar',\n                              role: 'cancel',\n                              cssClass: 'secondary',\n                              handler: blah => {}\n                            }]\n                          });\n\n                          return;\n                        }\n                      }\n                    });\n                  }\n\n                  if (_this.order.status_order != 25 && _this.order.status_order != 31) {\n                    _this.changeAvailability(true);\n\n                    const detail = _this.details[0];\n                    console.log(\"Routes\", response.routes);\n                    console.log(\"Overview Path\", response.routes[0].overview_path);\n                    const paths = [];\n                    response.routes[0].overview_path.map(l => {\n                      paths.push({\n                        lat: l.lat(),\n                        lng: l.lng()\n                      });\n                    });\n                    console.log(\"Path\", paths);\n                    _this.paths = paths;\n\n                    if (localStorage.getItem(\"latitude\") && localStorage.getItem(\"longitude\")) {\n                      const latitude = localStorage.getItem(\"latitude\");\n                      const longitude = localStorage.getItem(\"longitude\");\n                      const pos_lat_lng = new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude));\n\n                      const ordered_paths = _this.paths.sort((a, b) => {\n                        return _this.place.calcCrow(a.lat, a.lng, latitude, longitude) - _this.place.calcCrow(b.lat, b.lng, latitude, longitude);\n                      });\n\n                      const net_location = _this.paths.find(p => !p.read);\n\n                      net_location.read = true;\n                      const next_lat_lng = new google.maps.LatLng(net_location.lat, net_location.lng);\n\n                      const angle = _this.rotateMarker('assets/imgs/moto-new.svg', pos_lat_lng, next_lat_lng);\n\n                      _this.updatePosition(_this.auth.user.id, _this.auth.vehicles.id, latitude, longitude, _this.order.id, angle);\n                    }\n                  }\n                } else {\n                  _this.clearLocals();\n\n                  yield _this.ui.presentAlert({\n                    mode: 'ios',\n                    header: 'No se ha podido mostrar el mapa',\n                    message: status,\n                    buttons: [{\n                      text: 'Aceptar',\n                      role: 'cancel',\n                      cssClass: 'secondary',\n                      handler: blah => {\n                        _this.dismiss();\n                      }\n                    }]\n                  });\n                  console.log('Ha fallat la comunicació amb el mapa a causa de: ' + status);\n                }\n              });\n            });\n          } //calcular distancia\n\n\n          if (this.order.status_order != 25 && this.order.status_order != 31) {\n            for (let i = 0; i < waypts.length; i++) {\n              let a = null,\n                  b = null;\n\n              if (i < waypts.length - 1) {\n                a = {\n                  lat: waypts[i].location.lat,\n                  lng: waypts[i].location.lng\n                };\n              }\n\n              let j = i + 1;\n\n              if (j <= waypts.length - 1) {\n                b = {\n                  lat: waypts[j].location.lat,\n                  lng: waypts[j].location.lng\n                };\n              }\n\n              if (a != null && b != null) {\n                this.getDistanceMatrix(a, b);\n              }\n            }\n          }\n        } catch (e) {\n          (yield loader).dismiss(); // this.ui.showToast(\"No se pudo obtener la ubicación load MAp\")\n\n          console.log(\"Error\", e);\n          return;\n        }\n      } else {\n        this.ui.showToast(\"Verifique su conexión e intentelo de nuevo\", () => {\n          localStorage.removeItem(\"current_order\");\n          this.clearLocals();\n          this.dismiss();\n        });\n      }\n    });\n  }\n\n  printDirections(service_options, map) {\n    const _this = this;\n\n    var directionsService = new google.maps.DirectionsService();\n    var directionsDisplay = new google.maps.DirectionsRenderer({\n      suppressMarkers: true\n    });\n    directionsDisplay.setMap(map);\n    return new Promise((resolve, reject) => {\n      directionsService.route(service_options, function (response, status) {\n        return __awaiter(this, void 0, void 0, function* () {\n          // (await loader).dismiss()\n          if (status === google.maps.DirectionsStatus.OK) {\n            directionsDisplay.setDirections(response);\n            resolve({}); // console.log(\"center\", center)\n            // _this.map.setCenter(center)\n\n            if (_this.order.status_order != 25 && _this.order.status_order != 31) {\n              _this.changeAvailability(true);\n            }\n          } else {\n            resolve({});\n\n            _this.clearLocals();\n\n            console.log('Ha fallat la comunicació amb el mapa a causa de: ' + status);\n          }\n        });\n      });\n    });\n  }\n\n  callANumber(number) {\n    clearInterval(this.positionTracking);\n    console.log(\"Phone\", number);\n    this.ui.call(number);\n  }\n\n  parseFloat(long) {\n    return parseFloat(long);\n  }\n\n  getDistanceMatrix(origin, destination, loader) {\n    var service = new google.maps.DistanceMatrixService();\n\n    var _this = this; //calculo distancia\n\n\n    service.getDistanceMatrix({\n      origins: [origin],\n      destinations: [destination],\n      travelMode: google.maps.TravelMode.DRIVING,\n      unitSystem: google.maps.UnitSystem.METRIC,\n      avoidHighways: false,\n      avoidTolls: false\n    }, function (response, status) {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (status != google.maps.DistanceMatrixStatus.OK) {\n          yield _this.ui.presentAlert({\n            mode: 'ios',\n            header: 'No se pudo mostrar el mapa, verifique su conexión y reintentelo de nuevo',\n            buttons: [{\n              text: 'Aceptar',\n              role: 'cancel',\n              cssClass: 'secondary',\n              handler: blah => {\n                console.log('Confirm Cancel: blah');\n\n                _this.dismiss();\n              }\n            }]\n          });\n          console.log(\"Error was: \" + status);\n        } else {\n          try {\n            const {\n              distance,\n              duration: dur\n            } = response.rows[0].elements[0];\n            console.log(\"Response\", response.rows[0].elements[0]);\n            let distance_text = response.rows[0].elements[0].distance.text;\n            console.log(\"Distance Text\", distance_text);\n            let duration = dur.value;\n\n            _this.getCalculateDistance(distance_text, duration);\n          } catch (e) {\n            console.log(\"error\", e);\n          }\n        }\n      });\n    });\n  }\n\n  getCalculateDistance(distance, duration) {\n    this.distance = distance; // this.duration = 0;\n\n    const y = Number(duration);\n    this.duration += duration;\n    let hour;\n    let minutes;\n\n    if (this.duration >= 3600) {\n      hour = (this.duration / 3600).toFixed(0);\n\n      if (this.duration - 3600 >= 60) {\n        minutes = ((this.duration - 3600) / 60).toFixed(0);\n\n        if (minutes > 60) {\n          hour = Number(hour) + Number((minutes / 60).toFixed(0));\n          minutes -= Number((minutes / 60).toFixed(0)) * 60;\n        }\n      } else {\n        minutes = 1 .toFixed(0);\n      }\n    } else {\n      minutes = (this.duration / 60).toFixed(0);\n    }\n\n    const hour_unit = Number(hour) == 1 ? ' hora' : this.duration < 3600 ? '' : ' horas';\n    const min_unit = Number(minutes) == 1 ? ' minuto' : ' minutos';\n    hour = hour ? hour : '';\n    this.duration_text = hour + hour_unit + \" \" + minutes + min_unit;\n  }\n  /**\n   * This method is for calculate the distance between the current location\n   * and the detail is currently active\n   */\n\n\n  calculateAndEndDetail(item, latitude, longitude) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.detailActive.loading = true;\n      this.detailActive.text_loading = \"Calculando la distancia\";\n      let y = this.place.calcCrow(latitude, longitude, parseFloat(this.detailActive.latitude), parseFloat(this.detailActive.longitude));\n      console.log(\"Distance\", y);\n\n      if (!this.equal_or_greater_than_a_kilometer) {\n        y = Number(y) * 1000;\n      }\n\n      console.log(\"Y \", y);\n      this.minimum_distance = this.minimum_distance ? this.minimum_distance : 1;\n      this.detailActive.loading = false;\n      this.detailActive.text_loading = \"\";\n\n      if (y <= Number(this.minimum_distance)) {\n        yield this.ui.presentAlert({\n          mode: 'ios',\n          header: '¿Desea notificar que ya llegaste a este punto?',\n          buttons: [{\n            text: 'No',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {\n              console.log('Confirm Cancel: blah');\n            }\n          }, {\n            text: 'Sí',\n            handler: () => __awaiter(this, void 0, void 0, function* () {\n              clearInterval(this.positionTracking);\n              this.detailActive.loading = true;\n              this.detailActive.text_loading = \"Enviando la información\";\n              const data = new FormData();\n              const latitude = localStorage.getItem(\"latitude\");\n              const longitude = localStorage.getItem(\"longitude\");\n              data.append(\"order_detail_id\", this.detailActive.id);\n              data.append(\"latitude\", latitude);\n              data.append(\"longitude\", longitude);\n              data.append(\"description\", \"El mensajero ya llegó al destino \" + this.detailActive.address);\n              data.append(\"user_id\", this.auth.user.id.toString());\n              this.request.post('driver/register_event', data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n                this.detailActive.loading = false;\n                this.detailActive.text_loading = \"\";\n\n                if (this.order.diligence) {\n                  this.initTimer();\n                }\n\n                item.ended = true; //Update real time timer for the client\n\n                this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${this.detailActive.id}`).update(Object.assign({}, item));\n                localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n              }), err => __awaiter(this, void 0, void 0, function* () {\n                console.log(\"Error\", err);\n                this.detailActive.loading = false;\n                this.detailActive.text_loading = \"\";\n              }));\n            })\n          }]\n        });\n      } else {\n        yield this.ui.presentAlert({\n          mode: 'ios',\n          header: 'Advertencia',\n          message: 'Para poder finalizar, <br>debes estar cerca de la dirección',\n          buttons: [{\n            text: 'Aceptar',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {\n              console.log('Confirm Cancel: blah');\n            }\n          }]\n        });\n      }\n    });\n  }\n\n  end(item) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.network.getNetworkStatus().connected) {\n        console.log(\"Detail\", item); //Validate if the deatil isn't finished\n\n        if (item.status != 25 && item.status != 48) {\n          //The current order is a diligence?\n          if (this.order.diligence) {\n            //The current detail isn't ended?\n            if (!this.detailActive.ended) {\n              // The proxiimity is activated?\n              if (this.proximity == 1) {\n                let loader;\n                this.detailActive.loading = true;\n                this.detailActive.text_loading = \"Obteniendo tu ubicación\"; //Getting the current user location\n\n                try {\n                  //Get current user position\n                  let position; //Validate if the user is on a mobile\n\n                  if (Capacitor.platform != 'web') {\n                    //Work with background CORDOVA\n                    position = yield BackgroundGeolocation.getCurrentPosition({\n                      timeout: 30000\n                    });\n                  } else {\n                    //Work with Capacitot PWA\n                    position = yield Geolocation.getCurrentPosition({\n                      timeout: 30000\n                    });\n                  }\n\n                  this.detailActive.loading = false;\n                  this.detailActive.text_loading = \"\";\n                  let latitude = position.coords.latitude;\n                  let longitude = position.coords.longitude;\n                  this.latitude = latitude;\n                  this.longitude = longitude;\n                  localStorage.setItem(\"latitude\", latitude.toString());\n                  localStorage.setItem(\"longitude\", longitude.toString());\n                  this.calculateAndEndDetail(item, latitude, longitude);\n                } catch (e) {\n                  this.detailActive.loading = false;\n                  this.detailActive.text_loading = \"\"; // (await loader).dismiss();\n                  // this.ui.showToast(\"Error Geolocation\" + e)\n\n                  let latitude = localStorage.getItem(\"latitude\");\n                  let longitude = localStorage.getItem(\"longitude\");\n\n                  if (latitude && longitude) {\n                    this.latitude = latitude;\n                    this.longitude = longitude;\n                    localStorage.setItem(\"latitude\", latitude.toString());\n                    localStorage.setItem(\"longitude\", longitude.toString());\n                    this.calculateAndEndDetail(item, latitude, longitude);\n                  } else {\n                    yield this.ui.presentAlert({\n                      mode: 'ios',\n                      header: 'Advertencia',\n                      message: 'Su ubicación no está disponible ',\n                      buttons: [{\n                        text: 'Aceptar',\n                        role: 'cancel',\n                        cssClass: 'secondary',\n                        handler: blah => {\n                          console.log('Confirm Cancel: blah');\n                        }\n                      }]\n                    });\n                  }\n                }\n              } else {\n                yield this.ui.presentAlert({\n                  mode: 'ios',\n                  header: '¿Desea notificar que ya llegaste a este punto?',\n                  buttons: [{\n                    text: 'No',\n                    role: 'cancel',\n                    cssClass: 'secondary',\n                    handler: blah => {\n                      console.log('Confirm Cancel: blah');\n                    }\n                  }, {\n                    text: 'Sí',\n                    handler: () => __awaiter(this, void 0, void 0, function* () {\n                      clearInterval(this.positionTracking);\n                      this.detailActive.loading = true;\n                      this.detailActive.text_loading = \"Enviando información\";\n                      const data = new FormData();\n                      const latitude = localStorage.getItem(\"latitude\");\n                      const longitude = localStorage.getItem(\"latitude\");\n                      data.append(\"order_detail_id\", this.detailActive.id);\n                      data.append(\"latitude\", latitude.toString());\n                      data.append(\"longitude\", longitude.toString());\n                      data.append(\"description\", \"El mensajero ya llegó al destino \" + this.detailActive.address);\n                      data.append(\"user_id\", this.auth.user.id.toString());\n                      this.request.post('driver/register_event', data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n                        this.detailActive.loading = false;\n                        this.detailActive.text_loading = \"\";\n\n                        if (this.order.diligence == 1) {\n                          this.initTimer();\n                        }\n\n                        item.ended = true;\n                        this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${this.detailActive.id}`).update(Object.assign({}, item));\n                      }), err => __awaiter(this, void 0, void 0, function* () {\n                        console.log(\"Error\", err);\n                        this.detailActive.loading = false;\n                        this.detailActive.text_loading = \"\";\n                      }));\n                    })\n                  }]\n                });\n              }\n            } else {\n              yield this.ui.presentAlert({\n                mode: 'ios',\n                header: 'Finalizar',\n                buttons: [{\n                  text: 'Finalizado con éxito',\n                  cssClass: 'secondary',\n                  handler: blah => {\n                    this.initTimerB = false;\n                    this.sTopTimer();\n                    this.endDetail(item);\n                  }\n                }, {\n                  text: 'El cliente no se presentó',\n                  cssClass: 'secondary',\n                  handler: blah => __awaiter(this, void 0, void 0, function* () {\n                    if (this.m >= Number(this.order.time_wait)) {\n                      this.detailActive.loading = true;\n                      this.detailActive.text_loading = \"Enviando información\";\n                      const data = new FormData();\n                      data.append(\"order_detail_id\", this.detailActive.id);\n                      data.append(\"latitude\", this.latitude.toString());\n                      data.append(\"longitude\", this.longitude.toString());\n                      data.append(\"wait_time\", this.detailActive.timer ? this.detailActive.timer.minutes ? this.detailActive.timer.minutes.toString() : 0 .toString() : 0 .toString());\n                      data.append(\"surplus_money\", this.detailActive.total_charge ? this.detailActive.total_charge.toString() : 0 .toString());\n                      data.append(\"description\", \"El cliente no se presentó \" + this.detailActive.address);\n                      data.append(\"user_id\", this.auth.user.id.toString());\n                      const loader = yield this.ui.loading(\"Por favor espere...\");\n                      this.request.post(\"driver/delivery_change_order_to_ineffective\", data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n                        (yield loader).dismiss();\n                        this.initTimerB = false;\n                        this.sTopTimer();\n                        this.detailActive.loading = false;\n                        this.detailActive.text_loading = \"\";\n                        item.status = 48;\n                        item.ended = true;\n                        let cash = 0;\n                        localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n                        console.log(\"No effective\", res);\n\n                        if (res.data.order_no_effective || this.getOrderDetailStatusSuccessful()) {\n                          yield this.ui.presentAlert({\n                            mode: 'ios',\n                            header: 'Advertencia',\n                            message: 'La orden no ha sido efectiva',\n                            buttons: [{\n                              text: 'Aceptar',\n                              role: 'cancel',\n                              cssClass: 'secondary',\n                              handler: blah => {\n                                this.clearLocals();\n                                this.dismiss();\n                              }\n                            }]\n                          });\n                        } //Update real time timer for the client\n\n\n                        this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${item.id}`).update({\n                          status: 48\n                        });\n                      }), err => __awaiter(this, void 0, void 0, function* () {\n                        console.log(\"Err\", err);\n                        (yield loader).dismiss();\n\n                        if (err.status == 200) {\n                          yield this.ui.presentAlert({\n                            mode: 'ios',\n                            header: 'El detalle ha sido marcado como no efectivo',\n                            buttons: [{\n                              text: 'Aceptar',\n                              role: 'cancel',\n                              cssClass: 'secondary',\n                              handler: blah => {}\n                            }]\n                          });\n                        }\n\n                        if (err.status == 400) {\n                          yield this.ui.presentAlert({\n                            mode: 'ios',\n                            header: 'Error',\n                            message: err.error.messages[0],\n                            buttons: [{\n                              text: 'Aceptar',\n                              role: 'cancel',\n                              cssClass: 'secondary',\n                              handler: blah => {}\n                            }]\n                          });\n                        }\n                      }));\n                    } else {\n                      yield this.ui.presentAlert({\n                        mode: 'ios',\n                        header: 'No se puede finalizar esta dirección ',\n                        message: 'Al menos debe esperar ' + this.order.time_wait + ' minutos para poder finalizarlo',\n                        buttons: [{\n                          text: 'Aceptar',\n                          role: '',\n                          cssClass: 'secondary',\n                          handler: blah => {}\n                        }]\n                      });\n                    }\n                  })\n                }]\n              });\n            }\n          } else {\n            //The current detail isn't ended?\n            if (!this.detailActive.ended) {\n              //The proximity is activated?\n              if (this.proximity == 1) {\n                this.detailActive.loading = true;\n                this.detailActive.text_loading = \"Obteniendo tu ubicación\";\n\n                try {\n                  //Get current user position\n                  let position; //Validate if the user is on a mobile\n\n                  if (Capacitor.platform != 'web') {\n                    //Work with background CORDOVA\n                    position = yield BackgroundGeolocation.getCurrentPosition({\n                      timeout: 30000\n                    });\n                  } else {\n                    //Work with Capacitot PWA\n                    position = yield Geolocation.getCurrentPosition({\n                      timeout: 30000\n                    });\n                  }\n\n                  this.detailActive.loading = false;\n                  this.detailActive.text_loading = \"\";\n                  let latitude = position.coords.latitude;\n                  let longitude = position.coords.longitude;\n                  this.latitude = latitude;\n                  this.longitude = longitude;\n                  localStorage.setItem(\"latitude\", latitude.toString());\n                  localStorage.setItem(\"longitude\", longitude.toString());\n                  this.calculateAndEndDetail(item, latitude, longitude);\n                } catch (e) {\n                  this.detailActive.loading = false;\n                  this.detailActive.text_loading = \"\";\n                  let latitude = localStorage.getItem(\"latitude\");\n                  let longitude = localStorage.getItem(\"longitude\");\n\n                  if (latitude && longitude) {\n                    this.latitude = latitude;\n                    this.longitude = longitude;\n                    localStorage.setItem(\"latitude\", latitude.toString());\n                    localStorage.setItem(\"longitude\", longitude.toString());\n                    this.calculateAndEndDetail(item, latitude, longitude);\n                  } else {\n                    yield this.ui.presentAlert({\n                      mode: 'ios',\n                      header: 'Advertencia',\n                      message: 'Su ubicación no está disponible ',\n                      buttons: [{\n                        text: 'Aceptar',\n                        role: 'cancel',\n                        cssClass: 'secondary',\n                        handler: blah => {\n                          console.log('Confirm Cancel: blah');\n                        }\n                      }]\n                    });\n                  }\n                }\n              } else {\n                yield this.ui.presentAlert({\n                  mode: 'ios',\n                  header: '¿Desea notificar que ya llegaste a este punto?',\n                  buttons: [{\n                    text: 'No',\n                    role: 'cancel',\n                    cssClass: 'secondary',\n                    handler: blah => {\n                      console.log('Confirm Cancel: blah');\n                    }\n                  }, {\n                    text: 'Sí',\n                    handler: () => __awaiter(this, void 0, void 0, function* () {\n                      clearInterval(this.positionTracking);\n                      this.detailActive.loading = true;\n                      this.detailActive.text_loading = \"Enviando información\";\n                      const data = new FormData();\n                      data.append(\"order_detail_id\", this.detailActive.id);\n                      data.append(\"latitude\", this.latitude.toString());\n                      data.append(\"longitude\", this.longitude.toString());\n                      data.append(\"description\", \"El mensajero ya llegó al destino \" + this.detailActive.address);\n                      data.append(\"user_id\", this.auth.user.id.toString());\n                      this.request.post('driver/register_event', data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n                        this.detailActive.loading = false;\n                        this.detailActive.text_loading = \"\";\n\n                        if (this.order.diligence == 1) {\n                          this.initTimer();\n                        }\n\n                        item.ended = true;\n                        this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${this.detailActive.id}`).update(Object.assign({}, item));\n                      }), err => __awaiter(this, void 0, void 0, function* () {\n                        console.log(\"Error\", err);\n                        this.detailActive.loading = false;\n                        this.detailActive.text_loading = \"\";\n                      }));\n                    })\n                  }]\n                });\n              }\n            } else {\n              yield this.ui.presentAlert({\n                mode: 'ios',\n                header: 'Finalizar',\n                buttons: [{\n                  text: 'Finalizado con éxito',\n                  cssClass: 'secondary',\n                  handler: blah => {\n                    this.endDetail(item);\n                  }\n                }, {\n                  text: 'El cliente no se presentó',\n                  cssClass: 'secondary',\n                  handler: blah => __awaiter(this, void 0, void 0, function* () {\n                    const data = new FormData();\n                    data.append(\"order_detail_id\", this.detailActive.id);\n                    data.append(\"latitude\", this.latitude.toString());\n                    data.append(\"longitude\", this.longitude.toString());\n                    data.append(\"wait_time\", this.detailActive.timer ? this.detailActive.timer.minutes ? this.detailActive.timer.minutes.toString() : 0 .toString() : 0 .toString());\n                    data.append(\"surplus_money\", this.detailActive.total_charge ? this.detailActive.total_charge.toString() : 0 .toString());\n                    data.append(\"description\", \"El cliente no se presentó \" + this.detailActive.address);\n                    data.append(\"user_id\", this.auth.user.id.toString());\n                    this.detailActive.loading = true;\n                    this.detailActive.text_loading = \"Enviando información\";\n                    this.request.post(\"driver/delivery_change_order_to_ineffective\", data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n                      this.detailActive.loading = false;\n                      this.detailActive.text_loading = \"\";\n                      this.initTimerB = false;\n                      this.sTopTimer();\n                      item.status = 48;\n                      this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${item.id}`).update(Object.assign({}, item));\n                      localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n                      console.log(\"No effective\", res);\n\n                      if (res.data.order_no_effective || this.getOrderDetailStatusSuccessful()) {\n                        yield this.ui.presentAlert({\n                          mode: 'ios',\n                          header: 'Advertencia',\n                          message: 'La orden no ha sido efectiva',\n                          buttons: [{\n                            text: 'Aceptar',\n                            role: 'cancel',\n                            cssClass: 'secondary',\n                            handler: blah => {\n                              this.clearLocals();\n                              this.dismiss();\n                            }\n                          }]\n                        });\n                      }\n                    }), err => __awaiter(this, void 0, void 0, function* () {\n                      console.log(\"Err\", err);\n                      this.detailActive.loading = false;\n                      this.detailActive.text_loading = \"\";\n\n                      if (err.status == 200) {\n                        yield this.ui.presentAlert({\n                          mode: 'ios',\n                          header: 'El detalle ha sido marcado como no efectivo',\n                          buttons: [{\n                            text: 'Aceptar',\n                            role: 'cancel',\n                            cssClass: 'secondary',\n                            handler: blah => {}\n                          }]\n                        });\n                      }\n\n                      if (err.status == 400) {\n                        yield this.ui.presentAlert({\n                          mode: 'ios',\n                          header: 'Error',\n                          message: err.error.messages[0],\n                          buttons: [{\n                            text: 'Aceptar',\n                            role: 'cancel',\n                            cssClass: 'secondary',\n                            handler: blah => {}\n                          }]\n                        });\n                      }\n                    }));\n                  })\n                }]\n              });\n            }\n          }\n        } else {\n          this.ui.showToast(\"La dirección ya está realizada en el detalle del servicio\");\n        }\n      } else {\n        this.ui.showToast(\"Verifique su conexión\");\n      }\n    });\n  }\n\n  endTimeOrder() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const loader = yield this.ui.loading(\"Por favor espere...\");\n      const data = new FormData();\n      const latitude = localStorage.getItem(\"latitude\");\n      const longitude = localStorage.getItem(\"longitude\");\n      data.append(\"order_detail_id\", this.detailActive.id);\n      data.append(\"latitude\", latitude.toString());\n      data.append(\"longitude\", longitude.toString());\n      data.append(\"wait_time\", this.detailActive.timer ? this.detailActive.timer.minutes ? this.detailActive.timer.minutes.toString() : 0 .toString() : 0 .toString());\n      data.append(\"surplus_money\", this.detailActive.total_charge ? this.detailActive.total_charge.toString() : 0 .toString());\n      data.append(\"description\", \"Finalización \" + this.detailActive.address);\n      data.append(\"user_id\", this.auth.user.id.toString());\n      this.request.post(\"driver/end_order_detail\", data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n        (yield loader).dismiss();\n        this.detailActive.status = 25;\n        this.initTimerB = false;\n        this.sTopTimer();\n        localStorage.removeItem(\"timer\");\n        localStorage.removeItem(this.keyDetail);\n        localStorage.removeItem(\"initTimer\");\n        localStorage.removeItem(\"app_close_date\");\n        localStorage.removeItem(\"app_background_date\");\n        console.log(\"Order\", this.order);\n        const detail = this.order.details.find(d => d == this.detailActive);\n        console.log(\"Detail\", detail);\n        localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n        this.save();\n      }), err => __awaiter(this, void 0, void 0, function* () {\n        console.log(\"Error\", err);\n        (yield loader).dismiss();\n\n        if (err.status == 400) {\n          yield this.ui.presentAlert({\n            mode: 'ios',\n            header: err.error.messages[0]\n          });\n        }\n\n        this.ui.showToast(\"Ha ocurrido un error\");\n      }));\n    });\n  }\n\n  cancel() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.network.getNetworkStatus().connected) {\n        yield this.ui.presentAlert({\n          mode: 'ios',\n          header: '¿Estás seguro que quieres cancelar la orden?',\n          buttons: [{\n            text: 'No',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {}\n          }, {\n            text: 'Sí',\n            handler: blah => __awaiter(this, void 0, void 0, function* () {\n              yield this.ui.presentAlert({\n                mode: 'ios',\n                header: '¿Por qué desea cancelarla?',\n                inputs: [{\n                  name: 'why',\n                  id: 'paragraph',\n                  type: 'textarea',\n                  placeholder: 'Razón',\n                  mode: 'ios'\n                }],\n                buttons: [{\n                  text: 'Enviar',\n                  handler: res => __awaiter(this, void 0, void 0, function* () {\n                    const latitude = localStorage.getItem(\"latitude\");\n                    const longitude = localStorage.getItem(\"longitude\");\n                    const data = new FormData();\n                    const detail = this.detailActive ? this.detailActive : this.details[this.details.length - 1];\n                    data.append(\"order_detail_id\", detail.id);\n                    data.append(\"latitude\", latitude.toString());\n                    data.append(\"longitude\", longitude.toString());\n                    data.append(\"description\", res.why);\n                    data.append(\"user_id\", this.auth.user.id.toString());\n                    const loader = yield this.ui.loading(\"Por favor espere...\");\n                    this.request.post('driver/delivery_cancel_order', data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n                      (yield loader).dismiss();\n                      this.order.status_order = 25;\n                      localStorage.removeItem(\"current_order\");\n                      this.clearLocals();\n\n                      if (this.subscription) {\n                        this.subscription.unsubscribe();\n                      }\n\n                      if (this.subscription2) {\n                        this.subscription2.unsubscribe();\n                      }\n\n                      this.dismiss();\n                    }), err => __awaiter(this, void 0, void 0, function* () {\n                      (yield loader).dismiss();\n                      yield this.ui.presentAlert({\n                        mode: 'ios',\n                        header: 'No se ha podido cancelar la orden',\n                        buttons: [{\n                          text: \"Aceptar\",\n                          role: 'cancel',\n                          handler: () => {}\n                        }]\n                      });\n                    }));\n                  })\n                }]\n              });\n            })\n          }]\n        });\n      } else {\n        this.ui.showToast(\"Verifique su conexión\");\n      }\n    });\n  }\n\n  endDetail(item) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.network.getNetworkStatus().connected) {\n        this.detailActive.loading = true;\n        this.detailActive.text_loading = \"Enviando información\";\n        const data = new FormData();\n        data.append(\"order_detail_id\", item.id);\n        data.append(\"latitude\", this.latitude.toString());\n        data.append(\"longitude\", this.longitude.toString());\n        data.append(\"wait_time\", this.detailActive.timer ? this.detailActive.timer.minutes ? this.detailActive.timer.minutes.toString() : 0 .toString() : 0 .toString());\n        data.append(\"surplus_money\", this.detailActive.total_charge ? this.detailActive.total_charge.toString() : 0 .toString());\n        data.append(\"description\", \"Finalización \" + item.address);\n        data.append(\"user_id\", this.auth.user.id.toString());\n        this.request.post(\"driver/end_order_detail\", data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n          this.detailActive.loading = false;\n          this.detailActive.text_loading = \"\"; //Update real time timer for the client\n\n          this.realtime.getFirebaseCollection(`order_detail_report/${this.order.id}/${this.detailActive.id}`).update(Object.assign(Object.assign({}, item), {\n            status: 25\n          }));\n          item.status = 25;\n          this.initTimerB = false;\n          this.sTopTimer();\n          localStorage.removeItem(\"timer\");\n          localStorage.removeItem(this.keyDetail);\n          localStorage.removeItem(\"initTimer\");\n          localStorage.removeItem(\"app_close_date\");\n          localStorage.removeItem(\"app_background_date\");\n          console.log(\"Order\", this.order);\n          const detail = this.order.details.find(d => d == item);\n          console.log(\"Detail\", detail);\n\n          if (this.order.zapp_store_order == 1) {\n            this.order.status_order = 54;\n          }\n\n          localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n\n          if (this.getOrderDetailStatusSuccessful()) {\n            if (this.order.zapp_store_order == 1) {\n              this.order.status_order = 55;\n            }\n\n            localStorage.setItem(\"current_order\", JSON.stringify(this.order));\n            const amount_to_pay = this.order.payment_method.toLowerCase() == 'efectivo' ? this.order.zapp_store_order == 1 ? Number(this.order.total_zapp_store) : Number(this.order.total) : 0;\n            let message = \"Método de pago: <strong>\" + this.order.payment_method + \"</strong>\";\n            let cash = 0;\n\n            if (this.order.payment_method.toLowerCase() == 'masivo') {\n              let details = this.order.details ? this.order.details : this.order.detail;\n              details.forEach(d => {\n                cash += d.declared_value ? d.declared_value : 0;\n              });\n              message += \"<br> Valor del servicio: <strong>$\" + cash + \"</strong> <br>\";\n            } else {\n              message += \"<br> Valor del servicio: <strong>$\" + amount_to_pay + \"</strong> <br>\";\n            }\n\n            let wait_time = 0;\n            let total_charge = 0;\n\n            if (this.order.details) {\n              this.order.details.map(d => {\n                wait_time += d.wait_time ? Number(d.wait_time) : 0;\n                total_charge += d.total_charge ? Number(d.total_charge) : 0;\n              });\n            } else {\n              this.order.detail.map(d => {\n                wait_time += d.wait_time ? Number(d.wait_time) : 0;\n                total_charge += d.total_charge ? Number(d.total_charge) : 0;\n              });\n            }\n\n            if (total_charge > 0) {\n              message += \" Tiempo de espera : <strong>$\" + total_charge + \"</strong> <br>\";\n            }\n\n            total_charge = Number(total_charge);\n            const total = Number(amount_to_pay + total_charge + cash);\n            message += \"Total a pagar : <strong>$\" + total + \"</strong>\";\n            yield this.ui.presentAlert({\n              mode: 'ios',\n              header: '¡Tu viaje ha finalizado!',\n              message,\n              backdropDismiss: false,\n              buttons: [{\n                text: 'Aceptar',\n                role: 'cancel',\n                cssClass: 'secondary',\n                handler: blah => {\n                  if (this.order.service_type_id != 3) {\n                    this.save();\n                  } else {\n                    this.order.status_order = 25;\n                    localStorage.removeItem(\"current_order\");\n                    this.clearLocals();\n                    this.dismiss();\n                  }\n                }\n              }]\n            });\n          } else {\n            yield this.ui.presentAlert({\n              mode: 'ios',\n              header: '¡Acción Completada!',\n              message: item.address,\n              buttons: [{\n                text: 'Aceptar',\n                role: 'cancel',\n                cssClass: 'secondary',\n                handler: blah => {}\n              }]\n            });\n          }\n        }), err => __awaiter(this, void 0, void 0, function* () {\n          console.log(\"Error\", err);\n          this.detailActive.loading = false;\n          this.detailActive.text_loading = \"\";\n\n          if (err.status == 400) {\n            this.ui.showToast(\"Ha ocurrido un error \" + err.error.messages[0]);\n            return;\n          }\n        }));\n      } else {\n        this.ui.showToast(\"Verifique su conexión\");\n      }\n    });\n  }\n\n  viewEvent(order) {\n    return __awaiter(this, void 0, void 0, function* () {\n      clearInterval(this.positionTracking);\n\n      if (this.network.getNetworkStatus().connected) {\n        const modal = yield this.ui.presentModal(EventsPage, {\n          order,\n          latitude: this.latitude,\n          longitude: this.longitude\n        });\n        const m = yield modal.onDidDismiss();\n\n        if (!this.view_more && this.order.status_order != 25) {// this.changeAvailability()\n        }\n      } else {\n        this.ui.showToast(\"Verifique su conexión\");\n      }\n    });\n  }\n\n  getOrderDetailStatusSuccessful() {\n    if (this.order.details) {\n      return this.order.details.every(d => d.status == 25 || d.status == 48);\n    }\n\n    return this.order.detail.every(d => d.status == 25 || d.status == 48);\n  }\n\n  save() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.getOrderDetailStatusSuccessful()) {\n        console.log(\"Id\", this.order.id);\n\n        if (this.network.getNetworkStatus().connected) {\n          const data = new FormData(); // this.ui.showToast(\"Latitude \" + this.latitude + \" Longitud\" + this.longitude)\n\n          let wait_time = 0;\n          let total_charge = 0;\n          this.order.details.map(d => {\n            wait_time += d.wait_time ? Number(d.wait_time) : 0;\n            total_charge += d.total_charge ? Number(d.total_charge) : 0;\n          });\n          const latitude = localStorage.getItem(\"latitude\");\n          const longitude = localStorage.getItem(\"longitude\");\n          data.append(\"order_id\", this.order.id);\n          data.append(\"latitude\", latitude.toString());\n          data.append(\"longitude\", longitude.toString());\n          data.append(\"description\", \"Finalización Servicio\");\n          data.append(\"user_id\", this.auth.user.id.toString());\n          data.append(\"wait_time\", wait_time.toString());\n          data.append(\"surplus_money\", total_charge.toString());\n          const loader = this.ui.loading(\"Por favor espere...\");\n          this.request.post(\"driver/end_service\", data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n            (yield loader).dismiss();\n            clearInterval(this.positionTracking);\n            this.order.status_order = 25;\n            localStorage.setItem('end_order_id', String(this.order.id)); // localStorage.removeItem(\"latitude\");\n            // localStorage.removeItem(\"longitude\");\n\n            localStorage.removeItem(\"current_order\");\n            this.clearLocals();\n            this.ui.showToast(\"Orden finalizada.\", () => {\n              this.dismiss();\n\n              if (this.order.zapp_store_order == 1) {\n                const obj = {\n                  data: {\n                    status: \"completed\"\n                  }\n                }; //?option=update_order&id=2638\n                //wc_order_id\n\n                this.request.post(`?option=update_order&id=${this.order.wc_order_id}`, obj, true).subscribe(res => {\n                  console.log(\"Res\", res);\n                }, err => {\n                  if (err.status == 400) {\n                    this.ui.showToast(err.error.message);\n                  }\n                });\n              }\n            });\n          }), err => __awaiter(this, void 0, void 0, function* () {\n            console.log(\"Error\", err);\n            (yield loader).dismiss();\n            this.ui.showToast(err.error.messages[0]);\n          }));\n        } else {\n          this.ui.showToast(\"Verifique su conexión\");\n        }\n      } else {\n        this.ui.showToast(\"Debe finalizar cada una de las direcciones antes de finalizar la orden\");\n      }\n    });\n  }\n\n  startWatchingPosition(mode) {// if (this.auth.user.available != 0) {\n    //   if (Capacitor.platform !== 'web') {\n    //     // this.backgroundMode.isScreenOff((status) => {\n    //     //   if (status) {\n    //     //     if (this.auth.user != null && this.auth.user.available != 0) {\n    //     //       this.backgroundMode.wakeUp()\n    //     //     }\n    //     //   }\n    //     // })\n    //   }\n    //   this.id = Geolocation.watchPosition({\n    //     // enableHighAccuracy: true\n    //   }, async (position, err) => {\n    //     if (!err) {\n    //       const prev_latitude = this.latitude;\n    //       const prev_longitude = this.longitude;\n    //       localStorage.setItem(\"latitude\", position.coords.latitude.toString());\n    //       localStorage.setItem(\"longitude\", position.coords.longitude.toString());\n    //       this.details.shift();\n    //       this.details.unshift({\n    //         latitude: position.coords.latitude,\n    //         longitude: position.coords.longitude\n    //       });\n    //       this.latitude = position.coords.latitude;\n    //       this.longitude = position.coords.longitude;\n    //       localStorage.setItem(\"latitude\", position.coords.latitude.toString());\n    //       localStorage.setItem(\"longitude\", position.coords.longitude.toString());\n    //       // find address from lat lng\n    //       //check if the network is available\n    //       console.log(\"GPS\", position.coords);\n    //       this.latitude = position.coords.latitude.toString();\n    //       this.longitude = position.coords.longitude.toString();\n    //       console.log(\"Latitude 2\", this.latitude)\n    //       console.log(\"Longitud 2\", this.longitude);\n    //       this.details.shift();\n    //       this.details.unshift({\n    //         latitude: position.coords.latitude,\n    //         longitude: position.coords.longitude\n    //       })\n    //       console.log(\"Marker Points\", this.markerPoints)\n    //       // this.map.setCenter({ lat: parseFloat(this.details[0].latitude), lng: parseFloat(this.details[0].longitude) },)\n    //       let latlng = new google.maps.LatLng(parseFloat(this.latitude), parseFloat(this.longitude))\n    //       let prev_lat_lng = new google.maps.LatLng(parseFloat(prev_latitude), parseFloat(prev_longitude));\n    //       console.log(\"Prev latitude\", prev_latitude, \"Prev longitude\", prev_longitude)\n    //       console.log(\"latitude\", this.latitude, \"longitude\", this.longitude)\n    //       var marker_icon = {\n    //         url: this.markers[0], // url\n    //         scaledSize: new google.maps.Size(35, 50), // size\n    //         // origin: new google.maps.Point(0, 0), // origin\n    //         // anchor: new google.maps.Point(0, 0) // anchor \n    //       };\n    //       this.markerPoints[0].setPosition(latlng);\n    //       const url = \"img[src='\" + this.markers[0] + \"']\";\n    //       console.log(\"Url\", url)\n    //       const y: any = document.querySelectorAll(url);\n    //       const marker_div: any = document.querySelector(url)\n    //       console.log(\"img\", marker_div)\n    //       const ordered_paths = this.paths.sort((a, b) => {\n    //         return this.place.calcCrow(a.lat, a.lng, position.coords.latitude, position.coords.longitude) - this.place.calcCrow(b.lat, b.lng, position.coords.latitude, position.coords.longitude)\n    //       })\n    //       const net_location = this.paths.find(p => !p.read);\n    //       net_location.read = true;\n    //       const next_lat_lng = new google.maps.LatLng(net_location.lat, net_location.lng);\n    //       const heading = position.coords.heading ? position.coords.heading : 0;\n    //       if(localStorage.getItem(\"bearing\")){\n    //         const bearing= localStorage.getItem(\"bearing\");\n    //         localStorage.setItem(\"bearing_used\", bearing);\n    //       }\n    //       localStorage.setItem(\"bearing\", heading.toString())\n    //       const angle = this.rotateMarker(this.markers[0], prev_lat_lng, latlng, heading);\n    //       this.updatePosition(this.auth.user.id, this.auth.vehicles.id, position.coords.latitude, position.coords.longitude, this.order.id, angle)\n    //       // Haptics.vibrate()  \n    //       if (localStorage.getItem(\"current_order\")) {\n    //         const order = JSON.parse(localStorage.getItem(\"current_order\"));\n    //         if (order) {\n    //           let path = 'order_gps/' + order.id + '/' + this.auth.user.id;\n    //           this.db.object(path).update({\n    //             order: order.id,\n    //             key: this.auth.user.id,\n    //             vehicleId: this.auth.vehicles.id,\n    //             lat: position.coords.latitude,\n    //             lng: position.coords.longitude,\n    //             oldLat: position.coords.latitude,\n    //             oldLng: position.coords.longitude,\n    //             // last_active: Date.now(),\n    //             code: environment.VERSION_NAME\n    //           });\n    //           this.realtime.getFirebaseCollectionObject('order_history_reports/' + order.id + '/' + this.auth.user.id)\n    //             .valueChanges().pipe(take(1)).subscribe((value: any) => {\n    //               // this.ui.showToast(\"Locations \" + \"Latitude \" + lat + \" Longitud \" + lng + \"Hora\" + Date.now())\n    //               if (value === null) {\n    //                 const locations = [{\n    //                   lat: position.coords.latitude, lng: position.coords.longitude, created_at: Date.now()\n    //                 }]\n    //                 // this.ui.showToast(\"Locations \" + \"Latitude \" + lat + \" Longitud \" + lng + \"Hora\" + Date.now())\n    //                 this.realtime.getFirebaseCollectionObject('order_history_reports/' + order.id + '/' + this.auth.user.id).set({\n    //                   order,\n    //                   key: this.auth.user.id,\n    //                   user_id: this.auth.user.id,\n    //                   locations,\n    //                   code: environment.VERSION_NAME\n    //                 });\n    //               } else {\n    //                 // update\n    //                 let locations: any[] = value.locations;\n    //                 locations.push({\n    //                   lat: position.coords.latitude, lng: position.coords.longitude, created_at: Date.now()\n    //                 })\n    //                 this.realtime.getFirebaseCollectionObject('order_history_reports/' + order.id + '/' + this.auth.user.id)\n    //                   .update({\n    //                     order,\n    //                     key: this.auth.user.id,\n    //                     locations,\n    //                     code: environment.VERSION_NAME\n    //                   });\n    //               }\n    //             })\n    //         }\n    //       }\n    //     } else {\n    //       // this.ui.showToast(\"Entré en el error watch position\" + err);\n    //       await Geolocation.clearWatch({ id: this.id });\n    //       this.startWatchingPosition();\n    //       if (Capacitor.platform !== 'web') {\n    //         await this.backgroundGeolocation.removeAllListeners();\n    //       }\n    //       this.initializeBackgroundGeolocation()\n    //     }\n    //   });\n    // }\n    // setTimeout(async () => {\n    //   await Geolocation.clearWatch({ id: this.id });\n    //   this.startWatchingPosition();\n    //   if (Capacitor.platform !== 'web') {\n    //     await this.backgroundGeolocation.removeAllListeners();\n    //   }\n    //   this.initializeBackgroundGeolocation()\n    // }, 240000)\n  }\n\n  initializeBackgroundGeolocation() {\n    return __awaiter(this, void 0, void 0, function* () {// if (this.auth.user.available != 0) {\n      //   if (Capacitor.platform !== 'web') {\n      //     const config: BackgroundGeolocationConfig = {\n      //       desiredAccuracy: 10,\n      //       stationaryRadius: 2,\n      //       distanceFilter: 1,\n      //       // startOnBoot: true,\n      //       debug: false, //  enable this hear sounds for background-geolocation life-cycle.\n      //       stopOnTerminate: false, // enable this to clear background location settings when the app terminates\n      //     };\n      //     this.backgroundGeolocation.configure(config)\n      //       .then(() => {\n      //         this.backgroundGeolocation.on(BackgroundGeolocationEvents.location)\n      //           .subscribe((location: BackgroundGeolocationResponse) => {\n      //             console.log(location);\n      //             const prev_latitude = localStorage.getItem(\"latitude\");\n      //             const prev_longitude = localStorage.getItem(\"longitude\");\n      //             // Haptics.vibrate()\n      //             localStorage.setItem(\"latitude\", location.latitude.toString());\n      //             localStorage.setItem(\"longitude\", location.longitude.toString());\n      //             this.realtime.getUserGeolocation().update({\n      //               key: this.auth.user.id,\n      //               user_id: this.auth.user.id,\n      //               latitude: location.latitude.toString(),\n      //               longitude: location.longitude.toString(),\n      //               city_id: this.auth.person.city_id,\n      //               state_id: Number(this.auth.person.state_id),\n      //               level_id : Number(this.auth.user.level_id),\n      //               // last_active: Date.now(),\n      //               available: this.auth.user.available,\n      //               driver_name: this.auth.user.name,\n      //               transport_type_id: this.auth.vehicles.transport_type_id,\n      //             });\n      //             const latitude = localStorage.getItem(\"latitude\");\n      //             const longitude = localStorage.getItem(\"longitude\");\n      //             const lat_lng = new google.maps.LatLng(parseFloat(prev_latitude), parseFloat(prev_longitude));\n      //             const pos_lat_lng = new google.maps.LatLng(parseFloat(latitude), parseFloat(longitude));\n      //             this.markerPoints[0].setPosition(pos_lat_lng);\n      //             const ordered_paths = this.paths.sort((a, b) => {\n      //               return this.place.calcCrow(a.lat, a.lng, latitude, longitude) - this.place.calcCrow(b.lat, b.lng, latitude, longitude)\n      //             })\n      //             const net_location = this.paths.find(p => !p.read);\n      //             net_location.read = true;\n      //             const next_lat_lng = new google.maps.LatLng(net_location.lat, net_location.lng);\n      //             const bearing_ = location.bearing ? location.bearing : 0\n      //             if(localStorage.getItem(\"bearing\")){\n      //               const bearing= localStorage.getItem(\"bearing\");\n      //               localStorage.setItem(\"bearing_used\", bearing);\n      //             }\n      //             localStorage.setItem(\"bearing\", bearing_.toString())\n      //             const angle = this.rotateMarker(this.markers[0], lat_lng, pos_lat_lng, bearing_);\n      //             this.updatePosition(this.auth.user.id, this.auth.vehicles.id, location.latitude, location.longitude, this.order.id, angle)\n      //             // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\n      //             // and the background-task may be completed.  You must do this regardless if your operations are successful or not.\n      //             // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\n      //             this.backgroundGeolocation.finish(); // FOR IOS ONLY\n      //           });\n      //       });\n      //     // start recording location\n      //     this.backgroundGeolocation.start();\n      //     setTimeout(async () => {\n      //       // if(this.backgroundGeolocation.c)\n      //       this.backgroundGeolocation.removeAllListeners()\n      //       this.initializeBackgroundGeolocation()\n      //     }, 240000)\n      //   }\n      // }\n    });\n  }\n\n  rotateMarker(url_image, prev_position, position, angle_to_rotate) {\n    const url = `img[src='${url_image}']`;\n    console.log(\"Url\", url);\n    const y = document.querySelectorAll(url);\n    const marker_div = document.querySelector(url);\n    console.log(\"img\", marker_div);\n    let angle = 0;\n\n    if (y[0]) {\n      // when it hasn't loaded, it's null\n      console.log(\"Encontrado Marker\");\n\n      if (typeof angle_to_rotate == 'undefined') {\n        const angle = google.maps.geometry.spherical.computeHeading(prev_position, position);\n        const actual_angle = angle - 180;\n        console.log(\"Angle\", angle);\n        console.log(\"Actual Angle\", actual_angle);\n        y[0].style.transform = `rotate(${actual_angle}deg)`;\n        return actual_angle;\n      } else {\n        let bearing = 0;\n\n        if (localStorage.getItem(\"bearing_used\")) {\n          bearing = parseFloat(localStorage.getItem(\"bearing_used\"));\n        } else {\n          bearing = 180;\n        }\n\n        const actual_angle = angle_to_rotate - bearing;\n        y[0].style.transform = `rotate(${actual_angle}deg)`;\n        return actual_angle;\n      }\n    } else {\n      console.log(\"Image Angle Not Found\");\n    }\n\n    return angle;\n  }\n\n  changeAvailability(firstTime) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // clearInterval(this.positionTracking);\n      this.startWatchingPosition();\n      this.initializeBackgroundGeolocation();\n      Network.addListener('networkStatusChange', status => __awaiter(this, void 0, void 0, function* () {\n        console.log(\"Network status changed\", status);\n        localStorage.setItem(\"network_status\", JSON.stringify(status));\n\n        if (status.connected) {\n          Geolocation.clearWatch({\n            id: this.id\n          });\n\n          if (Capacitor.platform !== 'web') {// await this.backgroundGeolocation.removeAllListeners();\n          }\n\n          this.startWatchingPosition();\n          this.initializeBackgroundGeolocation();\n        }\n      }));\n    });\n  }\n\n  updatePosition(user_id, vehicleId, lat, lng, order, angle) {\n    let path = 'order_gps/' + order + '/' + user_id;\n    this.subscription = this.db.object(path).valueChanges().pipe(take(1)).subscribe(snapshot => {\n      if (localStorage.getItem(\"current_order\")) {\n        console.log(\"Este es el console.log de update position\");\n\n        if (this.network.getNetworkStatus().connected) {\n          if (snapshot === null) {\n            const obj_create = {\n              order,\n              key: user_id,\n              vehicleId,\n              lat,\n              lng,\n              oldLat: lat,\n              oldLng: lng,\n              angle,\n              // last_active: Date.now(),\n              code: environment.VERSION_NAME\n            };\n\n            if (typeof angle != 'undefined') {\n              obj_create.angle = angle;\n            }\n\n            this.db.object(path).set(obj_create);\n          } else {\n            // update\n            const obj_update = {\n              order,\n              key: user_id,\n              vehicleId,\n              lat,\n              lng,\n              oldLat: snapshot.lat,\n              oldLng: snapshot.lng,\n              // last_active: Date.now(),\n              code: environment.VERSION_NAME\n            };\n\n            if (typeof angle != 'undefined') {\n              obj_update.angle = angle;\n            }\n\n            this.db.object(path).update(obj_update);\n          }\n        } else {}\n      } else {\n        this.subscription.unsubscribe();\n      }\n\n      console.log(snapshot); // insert if not exists\n    });\n    this.subscription2 = this.realtime.getFirebaseCollectionObject('order_history_reports/' + order + '/' + user_id).valueChanges().pipe(take(1)).subscribe(value => {\n      // this.ui.showToast(\"Locations \" + \"Latitude \" + lat + \" Longitud \" + lng + \"Hora\" + Date.now())\n      if (localStorage.getItem(\"current_order\")) {\n        if (value === null) {\n          const locations = [{\n            lat,\n            lng,\n            created_at: Date.now()\n          }]; // this.ui.showToast(\"Locations \" + \"Latitude \" + lat + \" Longitud \" + lng + \"Hora\" + Date.now())\n\n          this.realtime.getFirebaseCollectionObject('order_history_reports/' + order + '/' + user_id).set({\n            order,\n            key: user_id,\n            user_id,\n            locations,\n            code: environment.VERSION_NAME\n          });\n        } else {\n          // update\n          let locations = value.locations;\n          locations.push({\n            lat,\n            lng,\n            created_at: Date.now()\n          });\n          this.realtime.getFirebaseCollectionObject('order_history_reports/' + order + '/' + user_id).update({\n            order,\n            key: user_id,\n            locations,\n            code: environment.VERSION_NAME\n          });\n        }\n      } else {\n        this.subscription2.unsubscribe();\n      }\n    });\n  }\n\n};\n\n__decorate([Input()], ViewDetailPage.prototype, \"order\", void 0);\n\n__decorate([Input()], ViewDetailPage.prototype, \"orders\", void 0);\n\n__decorate([Input()], ViewDetailPage.prototype, \"latLng\", void 0);\n\nViewDetailPage = __decorate([Component({\n  selector: 'app-view-detail',\n  templateUrl: './view-detail.page.html',\n  styleUrls: ['./view-detail.page.scss']\n})], ViewDetailPage);\nexport { ViewDetailPage };","map":null,"metadata":{},"sourceType":"module"}