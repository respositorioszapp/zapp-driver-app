{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { IonRouterOutlet } from '@ionic/angular';\nimport { Plugins } from '@capacitor/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@awesome-cordova-plugins/splash-screen/ngx\";\nimport * as i3 from \"@awesome-cordova-plugins/status-bar/ngx\";\nimport * as i4 from \"./services/fcm.service\";\nimport * as i5 from \"./services/background.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"./services/ui.service\";\nconst {\n  Network,\n  LocalNotifications\n} = Plugins;\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(platform, splashScreen, statusBar, fcm, background_mode, location, router, ui) {\n      this.platform = platform;\n      this.splashScreen = splashScreen;\n      this.statusBar = statusBar;\n      this.fcm = fcm;\n      this.background_mode = background_mode;\n      this.location = location;\n      this.router = router;\n      this.ui = ui;\n      this.lastTimeBackPress = 0;\n      this.timePeriodToExit = 2000;\n      Network.addListener('networkStatusChange', status => {\n        this.networkStatus = status;\n        console.log(\"Network status changed\", status);\n        localStorage.setItem(\"network_status\", JSON.stringify(status));\n\n        if (status.connected) {// location.reload()\n        }\n      });\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)');\n      this.toggleDarkTheme(prefersDark.matches); // Listen for changes to the prefers-color-scheme media query\n\n      prefersDark.addListener(mediaQuery => this.toggleDarkTheme(mediaQuery.matches)); // Add or remove the \"dark\" class based on if the media query matches\n\n      document.body.classList.toggle('dark', true);\n      this.backButtonEvent();\n      this.initializeNetwork();\n      this.initializeApp();\n    }\n\n    toggleDarkTheme(shouldAdd) {\n      console.log(\"shouldAdd\", shouldAdd);\n      document.body.classList.toggle('dark', shouldAdd);\n    }\n\n    backButtonEvent() {\n      this.platform.backButton.subscribeWithPriority(0, () => {\n        this.routerOutlets.forEach(outlet => __awaiter(this, void 0, void 0, function* () {\n          console.log(`Url ${this.router.url}`);\n\n          if (!this.router.url.includes('tabs/home')) {\n            // await this.router.navigate(['/']);\n            yield this.location.back();\n          } else if (this.router.url.includes('tabs/home')) {\n            if (new Date().getTime() - this.lastTimeBackPress >= this.timePeriodToExit) {\n              this.lastTimeBackPress = new Date().getTime();\n              this.presentAlertConfirm();\n            } else {\n              navigator['app'].exitApp();\n            }\n          }\n        }));\n      });\n    }\n\n    presentAlertConfirm() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.ui.presentAlert({\n          // header: 'Confirm!',\n          message: 'Está seguro de querer salir de la app?',\n          buttons: [{\n            text: 'Cancelar',\n            role: 'cancel',\n            cssClass: 'secondary',\n            handler: blah => {}\n          }, {\n            text: 'Cerrar Aplicación',\n            handler: () => {\n              navigator['app'].exitApp();\n            }\n          }]\n        });\n      });\n    }\n\n    initializeNetwork() {\n      return __awaiter(this, void 0, void 0, function* () {\n        this.networkStatus = yield Network.getStatus();\n        localStorage.setItem(\"network_status\", JSON.stringify(this.networkStatus));\n        console.log(\"Network status \", this.networkStatus);\n      });\n    }\n\n    initializeApp() {\n      this.platform.ready().then(() => {\n        this.statusBar.styleDefault();\n        this.splashScreen.hide();\n        this.fcm.initPush(); //this.backgroundMode.enable();\n      });\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.Platform), i0.ɵɵdirectiveInject(i2.SplashScreen), i0.ɵɵdirectiveInject(i3.StatusBar), i0.ɵɵdirectiveInject(i4.FcmService), i0.ɵɵdirectiveInject(i5.BackgroundService), i0.ɵɵdirectiveInject(i6.Location), i0.ɵɵdirectiveInject(i7.Router), i0.ɵɵdirectiveInject(i8.UiService));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    viewQuery: function AppComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(IonRouterOutlet, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.routerOutlets = _t);\n      }\n    },\n    decls: 2,\n    vars: 0,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-app\");\n        i0.ɵɵelement(1, \"ion-router-outlet\");\n        i0.ɵɵelementEnd();\n      }\n    }\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}