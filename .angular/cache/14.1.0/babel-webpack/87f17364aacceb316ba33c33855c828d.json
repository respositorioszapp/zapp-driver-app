{"ast":null,"code":"import { add, subHours, subMinutes } from 'date-fns';\nimport * as moment from 'moment';\nimport * as i0 from \"@angular/core\";\nexport let DaysService = /*#__PURE__*/(() => {\n  class DaysService {\n    constructor() {\n      /**\n      * Esta función dcompara si la fecha dada es igual a la de hoy\n      * @access public\n      * @param {string} someDate fecha\n      * @return string\n      */\n      this.isToday = someDate => {\n        const today = new Date();\n        return someDate.getDate() == today.getDate() && someDate.getMonth() == today.getMonth() && someDate.getFullYear() == today.getFullYear();\n      };\n    }\n\n    formatDays(days) {\n      let daysS = 0;\n      let months = 0;\n      let years = 0;\n\n      if (days >= 365) {\n        years = Number((days / 365).toFixed(0));\n        let cal_months = days - 365 * years;\n\n        if (cal_months > 0) {\n          if (cal_months >= 30) {\n            months = Number((cal_months / 30).toFixed(0));\n            let calcul_day = cal_months - 30 * months;\n            daysS = calcul_day;\n          }\n        } else {}\n      } else {\n        if (days >= 30) {\n          months = Number((days / 30).toFixed(0));\n          daysS = days - 30 * months;\n        } else {\n          daysS = days;\n        }\n      }\n\n      let format_days = \"\";\n      format_days += years > 0 ? years + (years == 1 ? ' año ' : ' años ') : '';\n      format_days += months > 0 ? months + (months == 1 ? ' mes ' : ' meses ') : '';\n      format_days += daysS > 0 ? daysS + (daysS == 1 ? ' día ' : ' días ') : '';\n      return format_days;\n    }\n\n    formatDaysWithDate(date) {\n      let today = new Date();\n      let date_of = new Date(date);\n      let difference = Math.floor((today.getTime() - date_of.getTime()) / (1000 * 60 * 60 * 24));\n      return this.formatDays(difference);\n    }\n\n    getHourDiff(initial_hour, final_hour, format) {\n      var entryHour = moment(initial_hour, 'hh:mm ');\n      var exitHour = moment(final_hour, 'hh:mm ');\n      const duration = moment.duration(exitHour.diff(entryHour));\n\n      if (!format) {\n        return duration.asHours();\n      }\n\n      if (format == \"hours\") {\n        return duration.asHours();\n      } else {\n        if (format == \"minutes\") {\n          return duration.asMinutes();\n        } else {\n          if (format == \"seconds\") {\n            return duration.asSeconds();\n          } else {\n            if (format == \"miliseconds\") {\n              return duration.asMilliseconds();\n            }\n          }\n        }\n      }\n    }\n    /**\n    * Esta función compara dos fechas dadas y retorna si es igual\n    * @access public\n    * @param {Date} date1 fecha uno\n    * @param {Date} date2 fecha dos\n    *\n    * @return boolean\n    */\n\n\n    isEqualDate(date1, date2) {\n      return date1.getDate() == date2.getDate() && date1.getMonth() == date2.getMonth() && date1.getFullYear() == date2.getFullYear();\n    }\n    /**\n    * Esta función suma un número de días a una fecha dada\n    * @access public\n    * @param {Date} date fecha uno\n    * @param {number} numberOfDays número de días\n    *\n    * @return Date\n    */\n\n\n    addDays(date, numberOfDays) {\n      console.log(\"Date\", date);\n      const dateMoment = add(date, {\n        days: numberOfDays\n      });\n      return dateMoment;\n    }\n    /**\n    * Esta función suma un número de minutos a una fecha dada\n    * @access public\n    * @param {Date} date fecha\n    * @param {number} numberOfMinutes número de minutos\n    *\n    * @return Date\n    */\n\n\n    substractMinutes(date, numberOfMinutes) {\n      const dateMoment = subMinutes(date, numberOfMinutes);\n      return dateMoment;\n    }\n    /**\n    * Esta función suma un número de horas a una fecha dada\n    * @access public\n    * @param {Date} date fecha\n    * @param {number} numberOfHours número de horas\n    *\n    * @return Date\n    */\n\n\n    substractHours(date, numberOfHours) {\n      const dateMoment = subHours(date, numberOfHours);\n      return dateMoment;\n    }\n\n  }\n\n  DaysService.ɵfac = function DaysService_Factory(t) {\n    return new (t || DaysService)();\n  };\n\n  DaysService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DaysService,\n    factory: DaysService.ɵfac,\n    providedIn: 'root'\n  });\n  return DaysService;\n})();","map":null,"metadata":{},"sourceType":"module"}