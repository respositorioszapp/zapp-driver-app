{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { AwesomeCordovaNativePlugin, instanceAvailability, cordovaInstance, checkAvailability } from '@awesome-cordova-plugins/core';\nimport * as ɵngcc0 from '@angular/core';\n\nvar FileTransfer =\n/** @class */\nfunction (_super) {\n  __extends(FileTransfer, _super);\n\n  function FileTransfer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * Error code rejected from upload with FileTransferError\n     * Defined in FileTransferError.\n     *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\n     *      INVALID_URL_ERR: 2,     Return when url was invalid\n     *      CONNECTION_ERR: 3,      Return on connection error\n     *      ABORT_ERR: 4,           Return on aborting\n     *      NOT_MODIFIED_ERR: 5     Return on '304 Not Modified' HTTP response\n     *\n     * @enum {number}\n     */\n\n\n    _this.FileTransferErrorCode = {\n      FILE_NOT_FOUND_ERR: 1,\n      INVALID_URL_ERR: 2,\n      CONNECTION_ERR: 3,\n      ABORT_ERR: 4,\n      NOT_MODIFIED_ERR: 5\n    };\n    return _this;\n  }\n  /**\n   * Creates a new FileTransfer object\n   *\n   * @returns {FileTransferObject}\n   */\n\n\n  FileTransfer.prototype.create = function () {\n    return new FileTransferObject();\n  };\n\n  FileTransfer.pluginName = \"FileTransfer\";\n  FileTransfer.plugin = \"cordova-plugin-file-transfer\";\n  FileTransfer.pluginRef = \"FileTransfer\";\n  FileTransfer.repo = \"https://github.com/apache/cordova-plugin-file-transfer\";\n  FileTransfer.platforms = [\"Amazon Fire OS\", \"Android\", \"Browser\", \"iOS\", \"Ubuntu\", \"Windows\", \"Windows Phone\"];\n\n  FileTransfer.ɵfac = /*@__PURE__*/function () {\n    var ɵFileTransfer_BaseFactory;\n    return function FileTransfer_Factory(t) {\n      return (ɵFileTransfer_BaseFactory || (ɵFileTransfer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(FileTransfer)))(t || FileTransfer);\n    };\n  }();\n\n  FileTransfer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FileTransfer,\n    factory: function (t) {\n      return FileTransfer.ɵfac(t);\n    }\n  });\n\n  (function () {\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n  })();\n\n  return FileTransfer;\n}(AwesomeCordovaNativePlugin);\n\nexport { FileTransfer };\n\nvar FileTransferObject =\n/** @class */\nfunction () {\n  function FileTransferObject() {\n    if (checkAvailability(FileTransfer.getPluginRef(), null, FileTransfer.getPluginName()) === true) {\n      this._objectInstance = new (FileTransfer.getPlugin())();\n    }\n  }\n\n  FileTransferObject.prototype.upload = function (fileUrl, url, options, trustAllHosts) {\n    return cordovaInstance(this, \"upload\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 3\n    }, arguments);\n  };\n\n  FileTransferObject.prototype.download = function (source, target, trustAllHosts, options) {\n    return cordovaInstance(this, \"download\", {\n      \"successIndex\": 2,\n      \"errorIndex\": 3\n    }, arguments);\n  };\n\n  FileTransferObject.prototype.onProgress = function (listener) {\n    var _this = this;\n\n    return function () {\n      if (instanceAvailability(_this) === true) {\n        _this._objectInstance.onprogress = listener;\n      }\n    }();\n  };\n\n  FileTransferObject.prototype.abort = function () {\n    return cordovaInstance(this, \"abort\", {\n      \"sync\": true\n    }, arguments);\n  };\n\n  FileTransferObject.plugin = \"cordova-plugin-file-transfer\";\n  FileTransferObject.pluginName = \"FileTransfer\";\n  return FileTransferObject;\n}();\n\nexport { FileTransferObject }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":null,"metadata":{},"sourceType":"module"}