{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { startOfWeek } from 'date-fns';\nimport { environment } from 'src/environments/environment';\nimport { Capacitor, FilesystemDirectory, Plugins } from '@capacitor/core';\nconst {\n  Filesystem,\n  Storage\n} = Plugins;\nimport { MimeTypes } from 'src/app/enums/mime-types.enum';\nimport { writeFile } from 'capacitor-blob-writer';\nlet LiquidationPage = class LiquidationPage {\n  constructor(transfer, file, auth, http, ui, iab, fileOpener, photo) {\n    this.transfer = transfer;\n    this.file = file;\n    this.auth = auth;\n    this.http = http;\n    this.ui = ui;\n    this.iab = iab;\n    this.fileOpener = fileOpener;\n    this.photo = photo;\n  }\n\n  ngOnInit() {}\n\n  ionViewWillEnter() {\n    // this.min_date = this.formatDated(y);\n    // console.log(\"Fecha min\", this.min_date)\n    // this.max_date = this.formatDated(maxf);\n    const today = new Date(); //This method is for get the first day of a week\n\n    const firstDay = startOfWeek(today);\n    this.min_date = this.formatDated(firstDay);\n    this.max_date = this.formatDated(today);\n  }\n\n  formatDated(date) {\n    let d = new Date(date),\n        day = '' + d.getDate(),\n        month = '' + (d.getMonth() + 1),\n        year = d.getFullYear();\n    if (month.length < 2) month = '0' + month;\n    if (day.length < 2) day = '0' + day;\n    console.log(\"Fecha\", [year, month, day].join('-'));\n    return [year, month, day].join('-');\n  }\n\n  download() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Download a file:\n      //exports_to_excel/liquidation_of_orders_driver?driver_id=6&start_date=2020/12/20&end_date=2020/12/22\n      const url = environment.BASEURL + \"exports_to_excel/liquidation_of_orders_of_driver?driver_id=\" + this.auth.user.id + \"&start_date=\" + this.min_date.split(\"T\")[0] + \"T00:00:00\" + \"&end_date=\" + this.max_date.split(\"T\")[0] + \"T23:59:00\";\n      const loader = yield this.ui.loading(\"Por favor espere...\");\n      this.http.get(url, {\n        responseType: 'blob'\n      }).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n        try {\n          console.log(\"File\", res);\n          const file_name = \"Liquidacion\" + new Date().getTime() + \".xlsx\"; // const base64 = await this.photo.blobToDataUrl(res) as string;\n\n          (yield loader).dismiss(); //Save File\n          // const savedFile = await Filesystem.writeFile({\n          //   path: file_name,\n          //   data: base64,\n          //   directory: FilesystemDirectory.Documents\n          // })\n\n          const {\n            uri\n          } = yield writeFile({\n            path: file_name,\n            directory: FilesystemDirectory.Data,\n            // data must be a Blob (creating a Blob which wraps other data types\n            // is trivial)\n            data: res,\n            // create intermediate directories if they don't already exist\n            // default: false\n            recursive: true,\n            // fallback to Filesystem.writeFile instead of throwing an error\n            // (you may also specify a unary callback, which takes an Error and returns\n            // a boolean)\n            // default: true\n            fallback: err => {\n              return err != undefined;\n            }\n          });\n          console.log(\"Saved File\", uri); //Save the file url to show it\n\n          const path = uri; //Set the mime type for excel\n\n          const mimeType = MimeTypes.Excel.toString();\n\n          if (Capacitor.platform !== 'web') {\n            this.fileOpener.open(path, mimeType).then(() => {\n              console.log(\"File is opened\");\n            }).catch(err => {\n              console.log(\"Error opening file\", err);\n            });\n          }\n        } catch (e) {\n          (yield loader).dismiss();\n          this.ui.showToast(\"Error\", e);\n        }\n\n        this.ui.showToast(\"Descargado\");\n      }), err => __awaiter(this, void 0, void 0, function* () {\n        (yield loader).dismiss();\n        this.ui.showToast(\"El mensajero no tiene liquidaci√≥n en este rango\");\n      }));\n    });\n  }\n\n};\nLiquidationPage = __decorate([Component({\n  selector: 'app-liquidation',\n  templateUrl: './liquidation.page.html',\n  styleUrls: ['./liquidation.page.scss']\n})], LiquidationPage);\nexport { LiquidationPage };","map":null,"metadata":{},"sourceType":"module"}