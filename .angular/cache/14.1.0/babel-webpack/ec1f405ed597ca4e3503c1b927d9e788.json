{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Plugins, Capacitor } from '@capacitor/core';\nimport { Subject } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nconst {\n  PushNotifications,\n  Haptics\n} = Plugins;\nconst {\n  Network,\n  LocalNotifications\n} = Plugins;\nexport let FcmService = /*#__PURE__*/(() => {\n  class FcmService {\n    constructor(router) {\n      this.router = router;\n      this.notifications = new Subject();\n    }\n\n    initPush() {\n      if (Capacitor.platform !== 'web') {\n        if (Capacitor.platform == \"android\") {\n          /**\n           * Build the notification channel with high imporatnce\n           */\n          const notificationChannel = {\n            id: 'pop-notifications',\n            name: 'Pop notifications',\n            description: 'Pop notifications',\n            importance: 5,\n            visibility: 1,\n            vibration: true,\n            lights: true\n          };\n          LocalNotifications.createChannel(notificationChannel);\n          PushNotifications.createChannel(notificationChannel);\n        }\n\n        this.registerPush();\n      }\n    }\n\n    playAudio() {\n      if (environment.PLAY_AUDIO_ON_REQUEST == true) {\n        this.audio = new Audio(environment.AUDIO_PATH);\n        this.audio.play();\n      }\n    }\n\n    stopAudio() {\n      this.audio.pause();\n    }\n\n    registerPush() {\n      PushNotifications.requestPermission().then(permission => {\n        if (permission.granted) {\n          // Register with Apple / Google to receive push via APNS/FCM\n          PushNotifications.register();\n        } else {// No permission for push granted\n        }\n      });\n      PushNotifications.addListener('registration', data => {\n        //console.log('My token: ' + JSON.stringify(data));\n        localStorage.setItem('fcmId', data.value);\n      });\n      PushNotifications.addListener('registrationError', error => {\n        console.log('Error: ' + JSON.stringify(error));\n      });\n      PushNotifications.addListener('pushNotificationReceived', notification => __awaiter(this, void 0, void 0, function* () {\n        const isPushNotification = !!notification.title || !!notification.body; // if this is a push notification received when the app is in the foreground on Android\n\n        if (isPushNotification) {\n          // We schedule a LocalNotification 1 second later since Capacitor for Android doesn't show anything in this case\n          LocalNotifications.schedule({\n            notifications: [{\n              title: notification.title,\n              body: notification.body,\n              id: new Date().getUTCMilliseconds(),\n              schedule: {\n                at: new Date(Date.now() + 1000)\n              },\n              extra: notification.data,\n              channelId: 'pop-notifications'\n            }]\n          });\n        }\n\n        Haptics.vibrate();\n        setTimeout(() => {\n          this.stopAudio();\n        }, 3000);\n        this.notifications.next(notification);\n        this.notifications = new Subject();\n        console.log('Push received: ' + JSON.stringify(notification));\n      }));\n      PushNotifications.addListener('pushNotificationActionPerformed', notification => __awaiter(this, void 0, void 0, function* () {\n        const data = notification.notification.data;\n        console.log('Action performed: ' + JSON.stringify(notification.notification));\n\n        if (data.detailsId) {\n          // this.router.navigateByUrl(`/home/${data.detailsId}`);\n          this.router.navigateByUrl('tabs/home');\n        }\n      }));\n    }\n\n  }\n\n  FcmService.ɵfac = function FcmService_Factory(t) {\n    return new (t || FcmService)(i0.ɵɵinject(i1.Router));\n  };\n\n  FcmService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FcmService,\n    factory: FcmService.ɵfac,\n    providedIn: 'root'\n  });\n  return FcmService;\n})();","map":null,"metadata":{},"sourceType":"module"}