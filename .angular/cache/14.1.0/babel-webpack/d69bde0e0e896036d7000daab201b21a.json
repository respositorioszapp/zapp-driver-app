{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Geolocation } from '@capacitor/core';\nimport { EventsPage } from '../events/events.page';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/ui.service\";\nimport * as i2 from \"src/app/services/request.service\";\nimport * as i3 from \"src/app/services/auth.service\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"@ionic/angular\";\n\nfunction DetailPage_ng_container_22_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"ion-button\", 10);\n    i0.ɵɵlistener(\"click\", function DetailPage_ng_container_22_Template_ion_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.registerEvent());\n    });\n    i0.ɵɵtext(2, \"Eventualiad\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-button\", 11);\n    i0.ɵɵlistener(\"click\", function DetailPage_ng_container_22_Template_ion_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.endDetail());\n    });\n    i0.ɵɵtext(4, \"Finalizar\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n}\n\nexport let DetailPage = /*#__PURE__*/(() => {\n  class DetailPage {\n    constructor(ui, request, auth) {\n      this.ui = ui;\n      this.request = request;\n      this.auth = auth;\n      this.az_arr = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n      this.distance = \"\";\n      this.duration = \"\";\n      this.currentLocation = {};\n      this.address_array = [];\n    }\n\n    ngOnInit() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const loader = this.ui.loading(\"Por favor espere...\");\n        const coordinates = yield Geolocation.getCurrentPosition();\n        const {\n          latitude,\n          longitude\n        } = coordinates.coords;\n        this.currentLocation = {\n          latitude,\n          longitude\n        };\n        this.address_array.push(this.currentLocation);\n        this.address_array.push(this.detail);\n        this.loadMap(loader);\n      });\n    }\n\n    loadMap(loader) {\n      //obtener usos de la API\n      var directionsService = new google.maps.DirectionsService();\n      var directionsDisplay = new google.maps.DirectionsRenderer({\n        suppressMarkers: true\n      }); //puntos de referencia para agregar\n\n      var waypts = [];\n      var markers = [];\n      var infos = []; //coordenadas de los puntos de ruta\n\n      for (let i = 0; i < this.address_array.length; i++) {\n        let latlng = {\n          lat: parseFloat(this.address_array[i].latitude),\n          lng: parseFloat(this.address_array[i].longitude)\n        };\n        waypts.push({\n          location: latlng,\n          stopover: true\n        });\n      } //creo mapa\n\n\n      var map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 6,\n        center: {\n          lat: waypts[0].location.lat,\n          lng: waypts[0].location.lng\n        }\n      }); //muestro el mapa\n\n      directionsDisplay.setMap(map); //ventanas de informacion\n\n      var infoWindow = new google.maps.InfoWindow(); //coordenadas markers personalizados con ventana de información\n\n      for (let i = 0; i < this.address_array.length; i++) {\n        let latlng = {\n          lat: parseFloat(this.address_array[i].latitude),\n          lng: parseFloat(this.address_array[i].longitude)\n        };\n        let marker = new google.maps.Marker({\n          position: latlng,\n          map: map,\n          icon: '../../../assets/imgs/markers/' + this.az_arr[i] + '.png'\n        });\n        markers.push(marker); // agrego la informacion de la dirección\n\n        infos.push(this.address_array[i].address); // google.maps.event.addListener(marker, 'click', (function(marker, i) {\n        //   return function() {\n        //       infoWindow.setContent(infos[i]);\n        //       infoWindow.open(map, marker);\n        //   }\n        // })(marker, i));\n      } // pregunto si es ida y vuelta el servicio\n\n\n      let origin, destination, return_pt;\n      let n = this.address_array.length - 1;\n\n      if (this.detail.round_trip === true) {\n        origin = {\n          lat: waypts[0].location.lat,\n          lng: waypts[0].location.lng\n        };\n        destination = {\n          lat: waypts[0].location.lat,\n          lng: waypts[0].location.lng\n        };\n        return_pt = {\n          lat: waypts[n].location.lat,\n          lng: waypts[n].location.lng\n        }; //punto de retorno en km y min\n\n        this.getDistanceMatrix(return_pt, origin);\n      } else {\n        origin = {\n          lat: waypts[0].location.lat,\n          lng: waypts[0].location.lng\n        };\n        destination = {\n          lat: waypts[n].location.lat,\n          lng: waypts[n].location.lng\n        };\n        this.getDistanceMatrix(origin, origin);\n      } // pinto la ruta\n\n\n      directionsService.route({\n        origin: origin,\n        destination: destination,\n        waypoints: waypts,\n        travelMode: google.maps.TravelMode.DRIVING\n      }, function (response, status) {\n        return __awaiter(this, void 0, void 0, function* () {\n          if (status === google.maps.DirectionsStatus.OK) {\n            directionsDisplay.setDirections(response);\n          } else {\n            console.log('Ha fallat la comunicació amb el mapa a causa de: ' + status);\n          }\n        });\n      }); //calcular distancia\n\n      for (let i = 0; i < waypts.length; i++) {\n        let a = null,\n            b = null;\n\n        if (i < waypts.length - 1) {\n          a = {\n            lat: waypts[i].location.lat,\n            lng: waypts[i].location.lng\n          };\n        }\n\n        let j = i + 1;\n\n        if (j <= waypts.length - 1) {\n          b = {\n            lat: waypts[j].location.lat,\n            lng: waypts[j].location.lng\n          };\n        }\n\n        if (a != null && b != null) {\n          this.getDistanceMatrix(a, b, loader);\n        }\n      }\n    }\n\n    getDistanceMatrix(origin, destination, loader) {\n      var service = new google.maps.DistanceMatrixService();\n\n      var _this = this; //calculo distancia\n\n\n      service.getDistanceMatrix({\n        origins: [origin],\n        destinations: [destination],\n        travelMode: google.maps.TravelMode.DRIVING,\n        unitSystem: google.maps.UnitSystem.METRIC,\n        avoidHighways: false,\n        avoidTolls: false\n      }, function (response, status) {\n        return __awaiter(this, void 0, void 0, function* () {\n          if (status != google.maps.DistanceMatrixStatus.OK) {\n            console.log(\"Error was: \" + status);\n          } else {\n            let distance_text = response.rows[0].elements[0].distance.text;\n            console.log(\"Distance Text\", distance_text);\n            let distance = distance_text.substring(0, distance_text.length - 3).replace(\",\", \".\");\n            let duration_text = response.rows[0].elements[0].duration.text;\n            console.log(\"Duration Text\", duration_text);\n            let duration = duration_text.substring(0, distance_text.length - 4);\n\n            _this.getCalculateDistance(distance_text, duration_text);\n\n            (yield loader).dismiss();\n          }\n        });\n      });\n    }\n\n    getCalculateDistance(distance, duration) {\n      this.distance = distance;\n      this.duration = duration;\n    }\n\n    registerEvent() {\n      this.ui.presentModal(EventsPage, {\n        detail: this.detail\n      });\n    }\n\n    endDetail() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const loader = this.ui.loading(\"Por favor espere...\");\n        const coordinates = yield Geolocation.getCurrentPosition();\n        const {\n          latitude,\n          longitude\n        } = coordinates.coords;\n        const data = new FormData();\n        data.append(\"order_detail_id\", this.detail.id);\n        data.append(\"latitude\", latitude.toString());\n        data.append(\"longitude\", longitude.toString());\n        data.append(\"description\", \"Finalización Detalle\");\n        data.append(\"user_id\", this.auth.user.id.toString());\n        this.request.post(\"driver/end_order_detail\", data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n          (yield loader).dismiss();\n          this.detail.status = 25;\n          this.ui.showToast(\"Servicio finalizado.\", () => {\n            this.dismiss();\n          });\n        }), err => __awaiter(this, void 0, void 0, function* () {\n          console.log(\"Error\", err);\n          (yield loader).dismiss();\n          this.ui.showToast(\"Ha ocurrido un error\");\n        }));\n      });\n    }\n\n    dismiss() {\n      this.ui.dismiss();\n    }\n\n  }\n\n  DetailPage.ɵfac = function DetailPage_Factory(t) {\n    return new (t || DetailPage)(i0.ɵɵdirectiveInject(i1.UiService), i0.ɵɵdirectiveInject(i2.RequestService), i0.ɵɵdirectiveInject(i3.AuthService));\n  };\n\n  DetailPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DetailPage,\n    selectors: [[\"app-detail\"]],\n    inputs: {\n      detail: \"detail\"\n    },\n    decls: 23,\n    vars: 9,\n    consts: [[\"color\", \"primary\", 2, \"position\", \"relative\"], [2, \"position\", \"absolute\", \"left\", \"5px\", \"bottom\", \"14px\"], [2, \"position\", \"absolute\", \"right\", \"5px\", \"bottom\", \"5px\", 3, \"click\"], [\"slot\", \"icon-only\", \"name\", \"close-outline\"], [\"color\", \"warning\"], [\"size\", \"12\"], [\"id\", \"map\", 2, \"width\", \"100%\", \"height\", \"200px\"], [\"map\", \"\"], [1, \"ion-text-center\"], [4, \"ngIf\"], [\"expand\", \"full\", \"fill\", \"outline\", \"color\", \"primary\", 3, \"click\"], [\"expand\", \"full\", \"color\", \"primary\", 3, \"click\"]],\n    template: function DetailPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\", 0)(2, \"ion-title\", 1);\n        i0.ɵɵtext(3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"ion-button\", 2);\n        i0.ɵɵlistener(\"click\", function DetailPage_Template_ion_button_click_4_listener() {\n          return ctx.dismiss();\n        });\n        i0.ɵɵelement(5, \"ion-icon\", 3);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(6, \"ion-content\", 4)(7, \"ion-card\")(8, \"ion-card-content\")(9, \"ion-grid\")(10, \"ion-row\")(11, \"ion-col\", 5);\n        i0.ɵɵelement(12, \"div\", 6, 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"p\");\n        i0.ɵɵtext(15);\n        i0.ɵɵpipe(16, \"uppercase\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\");\n        i0.ɵɵtext(18);\n        i0.ɵɵpipe(19, \"uppercase\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"p\", 8);\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, DetailPage_ng_container_22_Template, 5, 0, \"ng-container\", 9);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"\", ctx.detail.address, \" \");\n        i0.ɵɵadvance(12);\n        i0.ɵɵtextInterpolate1(\"Duraci\\u00F3n: \", i0.ɵɵpipeBind1(16, 5, ctx.duration), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate1(\"Distancia: \", i0.ɵɵpipeBind1(19, 7, ctx.distance), \" \");\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.detail.description);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.detail.status != 25);\n      }\n    },\n    dependencies: [i4.NgIf, i5.IonButton, i5.IonCard, i5.IonCardContent, i5.IonCol, i5.IonContent, i5.IonGrid, i5.IonHeader, i5.IonIcon, i5.IonRow, i5.IonToolbar, i5.IonTitle, i4.UpperCasePipe]\n  });\n  return DetailPage;\n})();","map":null,"metadata":{},"sourceType":"module"}