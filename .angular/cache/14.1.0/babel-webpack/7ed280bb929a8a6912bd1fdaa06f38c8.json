{"ast":null,"code":"import { __awaiter, __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport BackgroundGeolocation from 'cordova-background-geolocation-lt';\nlet AuthService = class AuthService {\n  constructor(request, router, db, afAuth, storage) {\n    this.request = request;\n    this.router = router;\n    this.db = db;\n    this.afAuth = afAuth;\n    this.storage = storage;\n    this.setData();\n  }\n\n  login(email, password) {\n    const body = {\n      email: email,\n      password: password\n    };\n    return this.request.post('login', body);\n  }\n\n  setData() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (localStorage.getItem('data')) {\n        const data = JSON.parse(localStorage.getItem('data'));\n        const {\n          user,\n          person,\n          token,\n          role,\n          vehicles,\n          collection_id\n        } = data;\n        this.collection_id = collection_id;\n        this.user = user;\n        this.person = person;\n        this.token = token;\n        this.role = role;\n        this.vehicles = vehicles;\n      }\n    });\n  }\n\n  register(userInfo) {\n    console.log(userInfo);\n    return Observable.create(observer => {\n      this.afAuth.createUserWithEmailAndPassword(userInfo.email, userInfo.password).then(authData => {\n        // update driver object\n        console.log(authData);\n        userInfo.uid = authData.user.uid;\n        this.afAuth.currentUser.then(res => {\n          res.updateProfile({\n            displayName: userInfo.name\n          });\n          this.db.object('drivers/' + userInfo.uid).update(userInfo);\n          observer.next();\n        });\n      }).catch(error => {\n        if (error) {\n          observer.error(error);\n        }\n      });\n    });\n  }\n\n  setVehicles(vehicles) {\n    this.vehicles = Object.assign(Object.assign({}, this.vehicles), vehicles);\n    const data = JSON.parse(localStorage.getItem('data'));\n    data.vehicles = this.vehicles;\n    localStorage.setItem(\"data\", JSON.stringify(data));\n  }\n\n  setPerson(person) {\n    this.person = Object.assign(Object.assign({}, this.person), person);\n    const data = JSON.parse(localStorage.getItem('data'));\n    data.person = this.person;\n    localStorage.setItem(\"data\", JSON.stringify(data));\n  }\n\n  setUser(user) {\n    this.user = Object.assign(Object.assign({}, this.user), user);\n    const data = JSON.parse(localStorage.getItem('data'));\n    data.user = this.user;\n    localStorage.setItem(\"data\", JSON.stringify(data));\n  }\n\n  getFirebaseUser() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const user = yield this.afAuth.currentUser;\n    });\n  }\n\n  logOut() {\n    return __awaiter(this, void 0, void 0, function* () {\n      localStorage.removeItem(\"isLoggedIn\");\n      localStorage.removeItem(\"data\");\n      localStorage.removeItem(\"current_order\");\n      localStorage.removeItem(\"current_status\");\n      localStorage.removeItem(\"current_status\");\n      localStorage.removeItem(\"currentDocuments\");\n      localStorage.removeItem(\"longitude\");\n      localStorage.removeItem(\"latitude\");\n      localStorage.removeItem(\"watchPositionId\");\n      localStorage.removeItem(\"current_massive_order\"); //current_massive_order\n\n      this.router.navigate(['/login']);\n      this.person = null;\n      this.role = null;\n      this.token = \"\";\n      this.user = null;\n      this.vehicles = null;\n\n      if (BackgroundGeolocation) {\n        yield BackgroundGeolocation.stop();\n      } // this.companies = null\n\n    });\n  }\n\n};\nAuthService = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthService);\nexport { AuthService };","map":null,"metadata":{},"sourceType":"module"}