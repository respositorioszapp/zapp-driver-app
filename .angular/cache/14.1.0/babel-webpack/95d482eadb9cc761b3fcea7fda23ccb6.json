{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { Plugins, CameraResultType, CameraSource } from '@capacitor/core';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"./ui.service\";\nconst {\n  FilePicker\n} = Plugins;\nconst {\n  Camera\n} = Plugins;\nexport let PhotoService = /*#__PURE__*/(() => {\n  class PhotoService {\n    constructor(actionSheetCtrl, ui) {\n      this.actionSheetCtrl = actionSheetCtrl;\n      this.ui = ui;\n      this.imageSubject = new BehaviorSubject({});\n    }\n\n    takePicture(source) {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          localStorage.setItem(\"takingPhoto\", \"yes\");\n          const image = yield Camera.getPhoto({\n            quality: 60,\n            allowEditing: false,\n            correctOrientation: true,\n            promptLabelPhoto: 'Elegir de la galería',\n            promptLabelPicture: 'Tomar foto',\n            resultType: CameraResultType.DataUrl,\n            source\n          });\n          this.imageSubject.next(image);\n          localStorage.removeItem(\"takingPhoto\");\n          this.imageSubject.complete();\n          this.imageSubject = new BehaviorSubject({});\n        } catch (e) {\n          console.log(\"Error\", e);\n          localStorage.removeItem(\"takingPhoto\");\n          this.imageSubject.complete();\n          this.imageSubject = new BehaviorSubject({});\n        }\n      });\n    }\n\n    selectImageSource() {\n      return __awaiter(this, void 0, void 0, function* () {\n        const buttons = [{\n          text: 'Tomar foto',\n          icon: 'camera',\n          handler: () => {\n            this.takePicture(CameraSource.Camera);\n          }\n        }, {\n          text: 'Elegir galeria',\n          icon: 'image',\n          handler: () => {\n            this.takePicture(CameraSource.Photos);\n          }\n        }, {\n          text: 'Cancelar',\n          icon: 'close',\n          role: 'cancel',\n          handler: () => {\n            this.imageSubject.complete();\n            this.imageSubject = new BehaviorSubject({});\n          }\n        }]; // Only allow file selection inside a browser\n\n        const actionSheet = yield this.actionSheetCtrl.create({\n          mode: 'ios',\n          header: 'Escoger',\n          buttons\n        });\n        yield actionSheet.present();\n      });\n    }\n\n    dataUrlToBlob(dataUrl) {\n      const arr = dataUrl.split(',');\n      const mime = arr[0].match(/:(.*?);/)[1];\n      const bstr = atob(arr[1]);\n      let n = bstr.length;\n      const u8arr = new Uint8Array(n);\n\n      while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n      }\n\n      return new Blob([u8arr], {\n        type: mime\n      });\n    }\n\n    blobToDataUrl(blob) {\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onerror = reject;\n\n        reader.onload = () => {\n          resolve(reader.result);\n        };\n\n        reader.readAsDataURL(blob);\n      });\n    }\n\n    getFileImage(dataUrl, name, format, useFormat) {\n      const type = useFormat ? format : `image/${format}`;\n      console.log(\"Type\", type);\n      const options = {\n        type\n      };\n      return new File([this.dataUrlToBlob(dataUrl)], name, {\n        type\n      });\n    }\n\n    getFileImageByBlob(blob, name, format, useFormat) {\n      const type = useFormat ? format : `image/${format}`;\n      console.log(\"Type\", type);\n      const options = {\n        type\n      };\n      return new File([blob], name, options);\n    }\n\n  }\n\n  PhotoService.ɵfac = function PhotoService_Factory(t) {\n    return new (t || PhotoService)(i0.ɵɵinject(i1.ActionSheetController), i0.ɵɵinject(i2.UiService));\n  };\n\n  PhotoService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PhotoService,\n    factory: PhotoService.ɵfac,\n    providedIn: 'root'\n  });\n  return PhotoService;\n})();","map":null,"metadata":{},"sourceType":"module"}