{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventEmitter } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/ui.service\";\nimport * as i2 from \"src/app/services/request.service\";\nimport * as i3 from \"src/app/services/auth.service\";\nimport * as i4 from \"src/app/services/photo.service\";\nimport * as i5 from \"src/app/services/network-status.service\";\nimport * as i6 from \"@angular/common\";\nimport * as i7 from \"@angular/forms\";\nimport * as i8 from \"@ionic/angular\";\n\nfunction CommentComponent_ion_item_4_ion_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-label\");\n    i0.ɵɵtext(1, \"El comentario es requerido\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction CommentComponent_ion_item_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\", 11);\n    i0.ɵɵelement(1, \"ion-icon\", 12);\n    i0.ɵɵtemplate(2, CommentComponent_ion_item_4_ion_label_2_Template, 2, 0, \"ion-label\", 13);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.controls.comment.errors.required);\n  }\n}\n\nfunction CommentComponent_ion_spinner_10_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-spinner\", 14);\n  }\n}\n\nfunction CommentComponent_ion_icon_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"ion-icon\", 15);\n  }\n}\n\nexport let CommentComponent = /*#__PURE__*/(() => {\n  class CommentComponent {\n    constructor(ui, request, auth, photo, network) {\n      this.ui = ui;\n      this.request = request;\n      this.auth = auth;\n      this.photo = photo;\n      this.network = network;\n      this.eventsUpdate = new EventEmitter();\n      this.scroll = new EventEmitter();\n      this.comment_data = new FormGroup({\n        comment: new FormControl('', [Validators.required])\n      });\n      this.sending = '';\n    }\n\n    ngOnInit() {\n      console.log(\"Detail\", this.order);\n    }\n\n    uploadPhoto() {\n      return __awaiter(this, void 0, void 0, function* () {\n        try {\n          if (this.network.getNetworkStatus().connected) {\n            yield yield this.photo.selectImageSource();\n            this.photo.imageSubject.subscribe(image => __awaiter(this, void 0, void 0, function* () {\n              if (Object.keys(image).length > 0) {\n                const dat = new Date().getTime();\n                const name_file1 = `${dat}_${this.auth.user.id}.${image.format}`;\n                const blob_image = this.photo.dataUrlToBlob(image.dataUrl);\n                const image_to_upload = this.photo.getFileImage(image.dataUrl, name_file1, image.format);\n                const item = this.order.details.find(d => d.status != 25);\n                const id = item.id;\n                this.events.push({\n                  order_detail_id: id,\n                  description: \"Foto \" + item.address,\n                  photo: image.dataUrl,\n                  sending: false\n                });\n                this.updateEvents();\n                this.scroll.emit();\n                this.sending = 'yes';\n                const {\n                  comment\n                } = this.comment_data.value;\n                const data = new FormData();\n                const latitude = localStorage.getItem(\"latitude\");\n                const longitude = localStorage.getItem(\"longitude\");\n                data.append(\"order_detail_id\", id);\n                data.append(\"latitude\", latitude.toString());\n                data.append(\"longitude\", longitude.toString());\n                data.append(\"description\", \"Foto \" + item.address);\n                data.append(\"user_id\", this.auth.user.id.toString());\n                data.append('photo', blob_image);\n                this.request.post('driver/register_event', data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n                  this.events[this.events.length - 1].sending = true;\n                  this.updateEvents();\n                  this.sending = undefined;\n                }), err => __awaiter(this, void 0, void 0, function* () {\n                  this.events.pop();\n                  this.updateEvents();\n                  yield this.ui.presentAlert({\n                    mode: 'ios',\n                    header: 'No se ha podido subir la imagen',\n                    buttons: [{\n                      text: 'Aceptar',\n                      role: 'cancel',\n                      cssClass: 'secondary',\n                      handler: blah => {}\n                    }]\n                  });\n                  console.log(\"Error\", err);\n                  this.sending = undefined;\n                }));\n              }\n            }));\n          } else {\n            this.ui.showToast(\"Verifique su conexión\");\n          }\n        } catch (err) {\n          yield this.ui.presentAlert({\n            mode: 'ios',\n            header: 'No se ha podido subir la imagen',\n            buttons: [{\n              text: 'Aceptar',\n              role: 'cancel',\n              cssClass: 'secondary',\n              handler: blah => {}\n            }]\n          });\n          console.log(\"Error\", err);\n        }\n      });\n    }\n\n    get controls() {\n      return this.comment_data.controls;\n    }\n\n    updateEvents() {\n      this.eventsUpdate.emit(this.events);\n    }\n\n    save() {\n      return __awaiter(this, void 0, void 0, function* () {\n        if (this.network.getNetworkStatus().connected) {\n          const id = this.order.details.find(d => d.status != 25).id;\n          const {\n            comment\n          } = this.comment_data.value;\n          this.events.push({\n            order_detail_id: id,\n            description: comment,\n            sending: false\n          });\n          this.comment_data.reset();\n          this.sending = 'yes';\n          this.updateEvents();\n          this.scroll.emit(); // const coordinates = await Geolocation.getCurrentPosition();\n          // const {\n          //   latitude,\n          //   longitude\n          // } = coordinates.coords;\n\n          const data = new FormData();\n          const latitude = localStorage.getItem(\"latitude\");\n          const longitude = localStorage.getItem(\"longitude\");\n          data.append(\"order_detail_id\", id);\n          data.append(\"latitude\", latitude.toString());\n          data.append(\"longitude\", longitude.toString());\n          data.append(\"description\", comment);\n          data.append(\"user_id\", this.auth.user.id.toString());\n          this.request.post('driver/register_event', data).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n            this.events[this.events.length - 1].sending = true;\n            this.updateEvents();\n            this.scroll.emit();\n            this.comment_data.reset();\n            this.sending = undefined;\n          }), err => __awaiter(this, void 0, void 0, function* () {\n            console.log(\"Error\", err);\n            this.events.pop();\n            this.updateEvents();\n            this.sending = undefined;\n            this.ui.showToast(\"No se ha podido enviar el comentario\");\n          }));\n        } else {\n          this.ui.showToast(\"Verifique su conexión\");\n        }\n      });\n    }\n\n  }\n\n  CommentComponent.ɵfac = function CommentComponent_Factory(t) {\n    return new (t || CommentComponent)(i0.ɵɵdirectiveInject(i1.UiService), i0.ɵɵdirectiveInject(i2.RequestService), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.PhotoService), i0.ɵɵdirectiveInject(i5.NetworkStatusService));\n  };\n\n  CommentComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: CommentComponent,\n    selectors: [[\"comment\"]],\n    inputs: {\n      order: \"order\",\n      events: \"events\",\n      longitude: \"longitude\",\n      latitude: \"latitude\"\n    },\n    outputs: {\n      eventsUpdate: \"eventsUpdate\",\n      scroll: \"scroll\"\n    },\n    decls: 12,\n    vars: 4,\n    consts: [[\"novalidate\", \"\", 2, \"display\", \"flex\", 3, \"formGroup\"], [2, \"width\", \"70%\", \"margin-left\", \"5px\"], [\"lines\", \"none\", 1, \"input-text\", \"ion-margin-top\"], [\"placeholder\", \"Comentario\", \"formControlName\", \"comment\", \"required\", \"\"], [\"lines\", \"none\", \"class\", \"danger-color-text\", 4, \"ngIf\"], [2, \"width\", \"15%\"], [\"expand\", \"block\", \"mode\", \"ios\", \"color\", \"light\", 1, \"ion-margin-top\", 3, \"click\"], [\"name\", \"images-outline\"], [\"type\", \"submit\", \"expand\", \"block\", \"mode\", \"ios\", \"color\", \"light\", 1, \"ion-margin-top\", 3, \"click\"], [\"name\", \"crescent\", \"color\", \"primary\", 4, \"ngIf\"], [\"name\", \"send-outline\", 4, \"ngIf\"], [\"lines\", \"none\", 1, \"danger-color-text\"], [\"name\", \"alert-circle\", \"slot\", \"start\", 1, \"danger-color-text\"], [4, \"ngIf\"], [\"name\", \"crescent\", \"color\", \"primary\"], [\"name\", \"send-outline\"]],\n    template: function CommentComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1)(2, \"ion-item\", 2);\n        i0.ɵɵelement(3, \"ion-input\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(4, CommentComponent_ion_item_4_Template, 3, 1, \"ion-item\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5)(6, \"ion-button\", 6);\n        i0.ɵɵlistener(\"click\", function CommentComponent_Template_ion_button_click_6_listener() {\n          return ctx.uploadPhoto();\n        });\n        i0.ɵɵelement(7, \"ion-icon\", 7);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 5)(9, \"ion-button\", 8);\n        i0.ɵɵlistener(\"click\", function CommentComponent_Template_ion_button_click_9_listener() {\n          return ctx.save();\n        });\n        i0.ɵɵtemplate(10, CommentComponent_ion_spinner_10_Template, 1, 0, \"ion-spinner\", 9);\n        i0.ɵɵtemplate(11, CommentComponent_ion_icon_11_Template, 1, 0, \"ion-icon\", 10);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.comment_data);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.controls.comment.dirty && ctx.controls.comment.touched && ctx.controls.comment.errors);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.sending == \"yes\");\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.sending);\n      }\n    },\n    dependencies: [i6.NgIf, i7.ɵNgNoValidate, i7.NgControlStatus, i7.NgControlStatusGroup, i7.RequiredValidator, i7.FormGroupDirective, i7.FormControlName, i8.IonButton, i8.IonIcon, i8.IonInput, i8.IonItem, i8.IonLabel, i8.IonSpinner, i8.TextValueAccessor]\n  });\n  return CommentComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}