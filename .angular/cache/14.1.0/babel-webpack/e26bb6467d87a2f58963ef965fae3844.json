{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { startOfWeek } from 'date-fns';\nimport { environment } from 'src/environments/environment';\nimport { Capacitor, FilesystemDirectory, Plugins } from '@capacitor/core';\nimport { MimeTypes } from 'src/app/enums/mime-types.enum';\nimport { writeFile } from 'capacitor-blob-writer';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@awesome-cordova-plugins/file-transfer/ngx\";\nimport * as i2 from \"@awesome-cordova-plugins/file/ngx\";\nimport * as i3 from \"src/app/services/auth.service\";\nimport * as i4 from \"@angular/common/http\";\nimport * as i5 from \"src/app/services/ui.service\";\nimport * as i6 from \"@awesome-cordova-plugins/in-app-browser/ngx\";\nimport * as i7 from \"@awesome-cordova-plugins/file-opener/ngx\";\nimport * as i8 from \"src/app/services/photo.service\";\nimport * as i9 from \"@angular/forms\";\nimport * as i10 from \"@ionic/angular\";\nimport * as i11 from \"@angular/common\";\nconst {\n  Filesystem,\n  Storage\n} = Plugins;\nexport let LiquidationPage = /*#__PURE__*/(() => {\n  class LiquidationPage {\n    constructor(transfer, file, auth, http, ui, iab, fileOpener, photo) {\n      this.transfer = transfer;\n      this.file = file;\n      this.auth = auth;\n      this.http = http;\n      this.ui = ui;\n      this.iab = iab;\n      this.fileOpener = fileOpener;\n      this.photo = photo;\n    }\n\n    ngOnInit() {}\n\n    ionViewWillEnter() {\n      // this.min_date = this.formatDated(y);\n      // console.log(\"Fecha min\", this.min_date)\n      // this.max_date = this.formatDated(maxf);\n      const today = new Date(); //This method is for get the first day of a week\n\n      const firstDay = startOfWeek(today);\n      this.min_date = this.formatDated(firstDay);\n      this.max_date = this.formatDated(today);\n    }\n\n    formatDated(date) {\n      let d = new Date(date),\n          day = '' + d.getDate(),\n          month = '' + (d.getMonth() + 1),\n          year = d.getFullYear();\n      if (month.length < 2) month = '0' + month;\n      if (day.length < 2) day = '0' + day;\n      console.log(\"Fecha\", [year, month, day].join('-'));\n      return [year, month, day].join('-');\n    }\n\n    download() {\n      return __awaiter(this, void 0, void 0, function* () {\n        // Download a file:\n        //exports_to_excel/liquidation_of_orders_driver?driver_id=6&start_date=2020/12/20&end_date=2020/12/22\n        const url = environment.BASEURL + \"exports_to_excel/liquidation_of_orders_of_driver?driver_id=\" + this.auth.user.id + \"&start_date=\" + this.min_date.split(\"T\")[0] + \"T00:00:00\" + \"&end_date=\" + this.max_date.split(\"T\")[0] + \"T23:59:00\";\n        const loader = yield this.ui.loading(\"Por favor espere...\");\n        this.http.get(url, {\n          responseType: 'blob'\n        }).subscribe(res => __awaiter(this, void 0, void 0, function* () {\n          try {\n            console.log(\"File\", res);\n            const file_name = \"Liquidacion\" + new Date().getTime() + \".xlsx\"; // const base64 = await this.photo.blobToDataUrl(res) as string;\n\n            (yield loader).dismiss(); //Save File\n            // const savedFile = await Filesystem.writeFile({\n            //   path: file_name,\n            //   data: base64,\n            //   directory: FilesystemDirectory.Documents\n            // })\n\n            const {\n              uri\n            } = yield writeFile({\n              path: file_name,\n              directory: FilesystemDirectory.Data,\n              // data must be a Blob (creating a Blob which wraps other data types\n              // is trivial)\n              data: res,\n              // create intermediate directories if they don't already exist\n              // default: false\n              recursive: true,\n              // fallback to Filesystem.writeFile instead of throwing an error\n              // (you may also specify a unary callback, which takes an Error and returns\n              // a boolean)\n              // default: true\n              fallback: err => {\n                return err != undefined;\n              }\n            });\n            console.log(\"Saved File\", uri); //Save the file url to show it\n\n            const path = uri; //Set the mime type for excel\n\n            const mimeType = MimeTypes.Excel.toString();\n\n            if (Capacitor.platform !== 'web') {\n              this.fileOpener.open(path, mimeType).then(() => {\n                console.log(\"File is opened\");\n              }).catch(err => {\n                console.log(\"Error opening file\", err);\n              });\n            }\n          } catch (e) {\n            (yield loader).dismiss();\n            this.ui.showToast(\"Error\", e);\n          }\n\n          this.ui.showToast(\"Descargado\");\n        }), err => __awaiter(this, void 0, void 0, function* () {\n          (yield loader).dismiss();\n          this.ui.showToast(\"El mensajero no tiene liquidación en este rango\");\n        }));\n      });\n    }\n\n  }\n\n  LiquidationPage.ɵfac = function LiquidationPage_Factory(t) {\n    return new (t || LiquidationPage)(i0.ɵɵdirectiveInject(i1.FileTransfer), i0.ɵɵdirectiveInject(i2.File), i0.ɵɵdirectiveInject(i3.AuthService), i0.ɵɵdirectiveInject(i4.HttpClient), i0.ɵɵdirectiveInject(i5.UiService), i0.ɵɵdirectiveInject(i6.InAppBrowser), i0.ɵɵdirectiveInject(i7.FileOpener), i0.ɵɵdirectiveInject(i8.PhotoService));\n  };\n\n  LiquidationPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LiquidationPage,\n    selectors: [[\"app-liquidation\"]],\n    decls: 32,\n    vars: 11,\n    consts: [[1, \"row\", \"justify-content-center\"], [1, \"col-sm-6\", \"ion-text-center\", \"w-50\", 2, \"padding\", \"0 10px\"], [1, \"ion-text-center\"], [1, \"input-text\", \"date\", 3, \"click\"], [\"displayFormat\", \"DD/MM/YYYY\", \"cancelText\", \"Cancelar\", \"doneText\", \"Guardar\", \"mode\", \"ios\", 1, \"hidden\", 3, \"max\", \"ngModel\", \"ngModelChange\"], [\"init\", \"\"], [\"fill\", \"clear\", \"slot\", \"end\", 1, \"ion-no-padding\", \"ion-no-margin\"], [\"name\", \"calendar-outline\"], [\"displayFormat\", \"DD/MM/YYYY\", \"cancelText\", \"Cancelar\", \"doneText\", \"Guardar\", \"mode\", \"ios\", 1, \"input-text\", \"hidden\", 3, \"ngModel\", \"ngModelChange\"], [\"end\", \"\"], [1, \"row\", \"ion-text-center\"], [2, \"text-align\", \"center\", \"margin\", \"10px auto\", 3, \"click\"], [\"name\", \"arrow-down-circle-outline\"]],\n    template: function LiquidationPage_Template(rf, ctx) {\n      if (rf & 1) {\n        const _r2 = i0.ɵɵgetCurrentView();\n\n        i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n        i0.ɵɵtext(3, \"Liquidaci\\u00F3n\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(4, \"ion-content\")(5, \"div\", 0)(6, \"div\", 1)(7, \"h4\", 2);\n        i0.ɵɵtext(8, \"Fecha Inicio \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"ion-item\", 3);\n        i0.ɵɵlistener(\"click\", function LiquidationPage_Template_ion_item_click_9_listener() {\n          i0.ɵɵrestoreView(_r2);\n\n          const _r0 = i0.ɵɵreference(14);\n\n          return i0.ɵɵresetView(_r0.open());\n        });\n        i0.ɵɵelementStart(10, \"label\");\n        i0.ɵɵtext(11);\n        i0.ɵɵpipe(12, \"date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"ion-datetime\", 4, 5);\n        i0.ɵɵlistener(\"ngModelChange\", function LiquidationPage_Template_ion_datetime_ngModelChange_13_listener($event) {\n          return ctx.min_date = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"ion-button\", 6);\n        i0.ɵɵelement(16, \"ion-icon\", 7);\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(17, \"div\", 1)(18, \"h4\", 2);\n        i0.ɵɵtext(19, \"Fecha Fin \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"ion-item\", 3);\n        i0.ɵɵlistener(\"click\", function LiquidationPage_Template_ion_item_click_20_listener() {\n          i0.ɵɵrestoreView(_r2);\n\n          const _r1 = i0.ɵɵreference(25);\n\n          return i0.ɵɵresetView(_r1.open());\n        });\n        i0.ɵɵelementStart(21, \"label\");\n        i0.ɵɵtext(22);\n        i0.ɵɵpipe(23, \"date\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(24, \"ion-datetime\", 8, 9);\n        i0.ɵɵlistener(\"ngModelChange\", function LiquidationPage_Template_ion_datetime_ngModelChange_24_listener($event) {\n          return ctx.max_date = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(26, \"ion-button\", 6);\n        i0.ɵɵelement(27, \"ion-icon\", 7);\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(28, \"div\", 10)(29, \"ion-button\", 11);\n        i0.ɵɵlistener(\"click\", function LiquidationPage_Template_ion_button_click_29_listener() {\n          return ctx.download();\n        });\n        i0.ɵɵtext(30, \"Descargar \");\n        i0.ɵɵelement(31, \"ion-icon\", 12);\n        i0.ɵɵelementEnd()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(11);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(12, 5, ctx.min_date, \"dd/MM/yyyy\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"max\", ctx.max_date)(\"ngModel\", ctx.min_date);\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind2(23, 8, ctx.max_date, \"dd/MM/yyyy\"), \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.max_date);\n      }\n    },\n    dependencies: [i9.NgControlStatus, i9.NgModel, i10.IonButton, i10.IonContent, i10.IonDatetime, i10.IonHeader, i10.IonIcon, i10.IonItem, i10.IonToolbar, i10.IonTitle, i10.SelectValueAccessor, i11.DatePipe]\n  });\n  return LiquidationPage;\n})();","map":null,"metadata":{},"sourceType":"module"}