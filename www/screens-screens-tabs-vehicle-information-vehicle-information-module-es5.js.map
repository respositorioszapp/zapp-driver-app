{"version":3,"sources":["webpack:///src/app/screens/screens-tabs/vehicle-information/vehicle-information.page.html","webpack:///src/app/screens/screens-tabs/vehicle-information/vehicle-information-routing.module.ts","webpack:///src/app/screens/screens-tabs/vehicle-information/vehicle-information.module.ts","webpack:///src/app/screens/screens-tabs/vehicle-information/vehicle-information.page.scss","webpack:///src/app/screens/screens-tabs/vehicle-information/vehicle-information.page.ts"],"names":["routes","path","component","VehicleInformationPageRoutingModule","imports","forChild","exports","VehicleInformationPageModule","declarations","VehicleInformationPage","fb","request","router","ui","auth","common","loadingController","network","transport_types","personal_information","transport_type","vehicle_information","group","transport_type_id","required","plate","minLength","maxLength","brand","model","year","color","objectChange","getNetworkStatus","connected","create","message","loader","present","get","subscribe","res","data","vehicles","find","t","name","id","setValue","Number","obj","valueChanges","y","Object","keys","key","controls","dismiss","error","console","log","showToast","value","toUpperCase","length","substring","navigate","valid","loading","user_id","user","role_id","dni_type_id","person","dni","first_name","last_name","address","phone","email","city_id","country","state_id","post","loadingDissmiss","setVehicles","err","messages","selector","template"],"mappings":"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","file":"screens-screens-tabs-vehicle-information-vehicle-information-module-es5.js","sourcesContent":["export default \"<ion-content color=\\\"warning\\\">\\n  <ion-button fill=\\\"clear\\\" (click)=\\\"back()\\\" style=\\\"position: absolute;\\n  left: 0px;\\n  padding: 10px;\\\" >\\n    <ion-icon name=\\\"arrow-back-outline\\\"   slot=\\\"icon-only\\\"  ></ion-icon>\\n  </ion-button>\\n  <div style=\\\"position: relative;\\\">\\n    <div class=\\\"ion-text-center margin-top-15vh ion-padding-bottom\\\" style=\\\"width: 60%;\\n    margin: auto;\\n    position: absolute;\\n    left: 0;\\n    right: 0;\\\">\\n      <img src=\\\"assets/imgs/logo-morado.png\\\" width=\\\"100\\\">\\n    </div>\\n  </div>\\n  <ion-card style=\\\"margin-top:50px\\\">\\n    <ion-card-header>\\n      <ion-card-subtitle class=\\\"ion-text-center\\\">\\n        <h3 ><span class=\\\"black-color-text ion-text-justify\\\">Información del vehículo</span></h3>\\n        \\n      </ion-card-subtitle>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <form [formGroup]=\\\"vehicle_information\\\" (submit)=\\\"save()\\\" novalidate>\\n        <ion-item lines=\\\"none\\\" class=\\\"input-text ion-margin-top\\\">\\n          <ion-select placeholder=\\\"Tipo de vehículo\\\" formControlName=\\\"transport_type_id\\\" style=\\\"display: contents;\\\" required [selectedText]=\\\"transport_type.name\\\">\\n            <ion-select-option *ngFor=\\\"let item of transport_types\\\" [value]=\\\"item.id\\\">{{item.name }}</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"danger-color-text ion-text-justify\\\"\\n          *ngIf=\\\"controls.transport_type_id.dirty && controls.transport_type_id.touched && controls.transport_type_id.errors\\\">\\n          <ion-icon name=\\\"alert-circle\\\" slot=\\\"start\\\" class=\\\"danger-color-text ion-text-justify\\\"></ion-icon>\\n          <ion-label *ngIf=\\\"controls.transport_type_id.errors.required\\\">El tipo de vehículo es requerida</ion-label>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"input-text ion-margin-top\\\">\\n          <ion-input placeholder=\\\"Placa\\\" formControlName=\\\"plate\\\" required ></ion-input>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"danger-color-text ion-text-justify\\\" *ngIf=\\\"controls.plate.dirty && controls.plate.touched && controls.plate.errors\\\">\\n          <ion-icon name=\\\"alert-circle\\\" slot=\\\"start\\\" class=\\\"danger-color-text ion-text-justify\\\"></ion-icon>\\n          <ion-label *ngIf=\\\"controls.plate.errors.required\\\">La placa es requerido</ion-label>\\n          <ion-label *ngIf=\\\"controls.plate.errors.minlength || controls.plate.errors.maxlength\\\">La placa debe contener 6\\n            caracteres</ion-label>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"input-text ion-margin-top\\\">\\n          <ion-input placeholder=\\\"Marca\\\" formControlName=\\\"brand\\\" required></ion-input>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"danger-color-text ion-text-justify\\\" *ngIf=\\\"controls.brand.dirty && controls.brand.touched && controls.brand.errors\\\">\\n          <ion-icon name=\\\"alert-circle\\\" slot=\\\"start\\\" class=\\\"danger-color-text ion-text-justify\\\"></ion-icon>\\n          <ion-label *ngIf=\\\"controls.brand.errors.required\\\">La marca es requerido</ion-label>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"input-text ion-margin-top\\\">\\n          <ion-input placeholder=\\\"Modelo\\\" formControlName=\\\"model\\\" required></ion-input>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"danger-color-text ion-text-justify\\\" *ngIf=\\\"controls.model.dirty && controls.model.touched && controls.model.errors\\\">\\n          <ion-icon name=\\\"alert-circle\\\" slot=\\\"start\\\" class=\\\"danger-color-text ion-text-justify\\\"></ion-icon>\\n          <ion-label *ngIf=\\\"controls.model.errors.required\\\">El modelo es requerido</ion-label>\\n        </ion-item>\\n      \\n        <ion-item lines=\\\"none\\\" class=\\\"input-text ion-margin-top\\\">\\n          <ion-select placeholder=\\\"Año\\\" formControlName=\\\"year\\\" style=\\\"display: contents;\\\">\\n            <ion-select-option *ngFor=\\\"let item of common.years\\\" [value]=\\\"item\\\">{{item }}</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"danger-color-text ion-text-justify\\\" *ngIf=\\\"controls.year.dirty && controls.year.touched && controls.year.errors\\\">\\n          <ion-icon name=\\\"alert-circle\\\" slot=\\\"start\\\" class=\\\"danger-color-text ion-text-justify\\\"></ion-icon>\\n          <ion-label *ngIf=\\\"controls.year.errors.required\\\">El año es requerido</ion-label>\\n        </ion-item>\\n      \\n        <ion-item lines=\\\"none\\\" class=\\\"input-text ion-margin-top\\\">\\n          <ion-select placeholder=\\\"Color\\\" formControlName=\\\"color\\\" style=\\\"display: contents;\\\" required>\\n            <ion-select-option *ngFor=\\\"let item of common.colors\\\" [value]=\\\"item\\\">{{item }}</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n        <ion-item lines=\\\"none\\\" class=\\\"danger-color-text ion-text-justify\\\" *ngIf=\\\"controls.color.dirty && controls.color.touched && controls.color.errors\\\">\\n          <ion-icon name=\\\"alert-circle\\\" slot=\\\"start\\\" class=\\\"danger-color-text ion-text-justify\\\"></ion-icon>\\n          <ion-label *ngIf=\\\"controls.color.errors.required\\\" >El color es requerido</ion-label>\\n        </ion-item>\\n        <!--  -->\\n        <ion-button type=\\\"submit\\\" expand=\\\"block\\\" mode=\\\"ios\\\" color=\\\"primary\\\" class =\\\"ion-margin-top\\\"  >\\n          ACTUALIZAR\\n        </ion-button>\\n      </form>      \\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { VehicleInformationPage } from './vehicle-information.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VehicleInformationPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class VehicleInformationPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { VehicleInformationPageRoutingModule } from './vehicle-information-routing.module';\n\nimport { VehicleInformationPage } from './vehicle-information.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ReactiveFormsModule,\n    VehicleInformationPageRoutingModule\n  ],\n  declarations: [VehicleInformationPage]\n})\nexport class VehicleInformationPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3NjcmVlbnMvc2NyZWVucy10YWJzL3ZlaGljbGUtaW5mb3JtYXRpb24vdmVoaWNsZS1pbmZvcm1hdGlvbi5wYWdlLnNjc3MifQ== */\";","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { RequestService } from 'src/app/services/request.service';\nimport { Router } from '@angular/router';\nimport { UiService } from 'src/app/services/ui.service';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { CommonAtrributesService } from 'src/app/services/common-atrributes.service';\nimport { LoadingController } from '@ionic/angular';\nimport { NetworkStatusService } from 'src/app/services/network-status.service';\n\n@Component({\n  selector: 'app-vehicle-information',\n  templateUrl: './vehicle-information.page.html',\n  styleUrls: ['./vehicle-information.page.scss'],\n})\nexport class VehicleInformationPage implements OnInit {\n  transport_types = []\n  personal_information: any = {\n\n  }\n  transport_type: any = {}\n  vehicle_information = this.fb.group({\n    transport_type_id: ['', Validators.required],\n    plate: ['', [Validators.required, Validators.minLength(6), Validators.maxLength(6)]],\n    brand: ['', Validators.required],\n    model: ['', [Validators.required]],\n    year: [2020, [Validators.required]],\n    color: ['', [Validators.required]],\n  })\n  objectChange = false\n  constructor(private fb: FormBuilder,\n    private request: RequestService,\n    private router: Router,\n    private ui: UiService,\n    private auth: AuthService,\n    public common: CommonAtrributesService,\n    private loadingController: LoadingController,\n    private network: NetworkStatusService) { }\n\n  async ngOnInit() {\n\n  }\n\n  async ionViewWillEnter() {\n    if (this.network.getNetworkStatus().connected) {\n      const loader = await this.loadingController.create({ message: \"Por favor espere...\" });\n      await loader.present();\n      this.request.get('list/attributes?parameter_id=2')\n        .subscribe(async (res: any) => {\n          this.transport_types = res.data;\n          if (this.auth.vehicles) {\n            let {\n              brand,\n              color,\n              model,\n              plate,\n              transport_type_id,\n              year\n            } = this.auth.vehicles;\n            this.transport_type = this.transport_types.find(t => t.name == transport_type_id || t.id == transport_type_id);\n            transport_type_id = this.transport_type.id;\n            this.vehicle_information.setValue({\n              brand,\n              color,\n              model,\n              plate,\n              transport_type_id: this.transport_type.id,\n              year: Number(year)\n            })\n            const obj = {\n              brand,\n              color,\n              model,\n              plate,\n              transport_type_id,\n              year\n            }\n            this.vehicle_information.valueChanges.subscribe(res => {\n              const y = Object.keys(obj).find(key => {\n                return obj[key] != res[key]\n              })\n              if (y) {\n                this.objectChange = true;\n              } else {\n                this.objectChange = false;\n              }\n\n            });\n          } else {\n            this.objectChange = true;\n          }\n\n          this.controls.transport_type_id.valueChanges.subscribe(res => {\n            this.transport_type = this.transport_types.find(t => t.id == res);\n          });\n\n          (await loader).dismiss();\n        }, async (error: any) => {\n          (await loader).dismiss();\n          console.log(\"Error\", error);\n        })\n    }else{\n      this.ui.showToast(\"Verifique su conexión\");\n    }\n  }\n\n  get controls() {\n    return this.vehicle_information.controls;\n  }\n\n  plateOnChange() {\n    let plate: string = this.vehicle_information.value.plate;\n    plate = plate.toUpperCase();\n    if (plate.length > 6) {\n      plate = plate.substring(0, 5)\n    }\n    this.controls.plate.setValue(plate);\n  }\n\n  back() {\n    this.router.navigate(['/tabs/profile'])\n  }\n\n  save() {\n    if (this.objectChange) {\n      if (this.vehicle_information.valid) {\n        if (this.network.getNetworkStatus().connected) {\n          this.ui.loading(\"Por favor espere...\");\n          const {\n            brand,\n            color,\n            model,\n            plate,\n            transport_type_id,\n            year\n          } = this.vehicle_information.value;\n          const obj = {\n            user_id: this.auth.user.id,\n            role_id: 5,\n            dni_type_id: this.auth.person.dni_type_id,\n            dni: this.auth.person.dni,\n            first_name: this.auth.person.first_name,\n            last_name: this.auth.person.last_name,\n            address: this.auth.person.address,\n            phone: this.auth.person.phone,\n            email: this.auth.person.email,\n            city_id: this.auth.person.city_id,\n            country: \"CO\",\n            state_id: this.auth.person.state_id,\n            transport_type_id,\n            model,\n            brand,\n            color,\n            plate,\n            year\n          }\n          console.log(\"Obj\", obj)\n          this.request.post('driver/update_driver', obj)\n            .subscribe((res: any) => {\n              this.ui.loadingDissmiss()\n              this.auth.setVehicles({\n                transport_type_id,\n                model,\n                brand,\n                color,\n                plate,\n                year\n              })\n              this.ui.showToast(\"Usuario actualizado exitosamente\", () => {\n                this.router.navigate(['/tabs/profile'])\n              }\n              )\n            }, (err: any) => {\n              this.ui.loadingDissmiss();\n              console.log(err);\n              this.ui.showToast(err.error.messages[0]);\n\n            })\n        } else {\n          this.ui.showToast(\"Verifique su conexión\")\n        }\n      }\n    } else {\n      this.ui.showToast(\"Debe cambiar alguno de los campos\");\n    }\n\n  }\n}\n"]}